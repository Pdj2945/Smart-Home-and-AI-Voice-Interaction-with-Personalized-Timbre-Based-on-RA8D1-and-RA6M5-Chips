<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\zf_ra_motherboard_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\zf_ra_motherboard_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Tue Jul  8 21:19:58 2025
<BR><P>
<H3>Maximum Stack Usage =       7480 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Reset_Handler &rArr; main &rArr; hal_entry &rArr; audio_loop &rArr; process_recording_state &rArr; send_message_to_bafa &rArr; connect_bafa_cloud &rArr; check_and_restore_wifi &rArr; wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b0]">bsp_prv_software_delay_loop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b0]">bsp_prv_software_delay_loop</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[1]">NMI_Handler</a> from bsp_group_irq.o(.text.NMI_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[9]">PendSV_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[29]">R_ADC_Calibrate</a> from r_adc.o(.text.R_ADC_Calibrate) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[2b]">R_ADC_CallbackSet</a> from r_adc.o(.text.R_ADC_CallbackSet) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[2c]">R_ADC_Close</a> from r_adc.o(.text.R_ADC_Close) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[2d]">R_ADC_InfoGet</a> from r_adc.o(.text.R_ADC_InfoGet) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[2a]">R_ADC_OffsetSet</a> from r_adc.o(.text.R_ADC_OffsetSet) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[21]">R_ADC_Open</a> from r_adc.o(.text.R_ADC_Open) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[27]">R_ADC_Read</a> from r_adc.o(.text.R_ADC_Read) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[28]">R_ADC_Read32</a> from r_adc.o(.text.R_ADC_Read32) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[22]">R_ADC_ScanCfg</a> from r_adc.o(.text.R_ADC_ScanCfg) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[24]">R_ADC_ScanGroupStart</a> from r_adc.o(.text.R_ADC_ScanGroupStart) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[23]">R_ADC_ScanStart</a> from r_adc.o(.text.R_ADC_ScanStart) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[25]">R_ADC_ScanStop</a> from r_adc.o(.text.R_ADC_ScanStop) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[26]">R_ADC_StatusGet</a> from r_adc.o(.text.R_ADC_StatusGet) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[4f]">R_AGT_CallbackSet</a> from r_agt.o(.text.R_AGT_CallbackSet) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[50]">R_AGT_Close</a> from r_agt.o(.text.R_AGT_Close) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[4c]">R_AGT_CompareMatchSet</a> from r_agt.o(.text.R_AGT_CompareMatchSet) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[49]">R_AGT_Disable</a> from r_agt.o(.text.R_AGT_Disable) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[4b]">R_AGT_DutyCycleSet</a> from r_agt.o(.text.R_AGT_DutyCycleSet) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[48]">R_AGT_Enable</a> from r_agt.o(.text.R_AGT_Enable) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[4d]">R_AGT_InfoGet</a> from r_agt.o(.text.R_AGT_InfoGet) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[44]">R_AGT_Open</a> from r_agt.o(.text.R_AGT_Open) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[4a]">R_AGT_PeriodSet</a> from r_agt.o(.text.R_AGT_PeriodSet) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[47]">R_AGT_Reset</a> from r_agt.o(.text.R_AGT_Reset) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[45]">R_AGT_Start</a> from r_agt.o(.text.R_AGT_Start) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[4e]">R_AGT_StatusGet</a> from r_agt.o(.text.R_AGT_StatusGet) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[46]">R_AGT_Stop</a> from r_agt.o(.text.R_AGT_Stop) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[5b]">R_DTC_CallbackSet</a> from r_dtc.o(.text.R_DTC_CallbackSet) referenced from r_dtc.o(.rodata.g_transfer_on_dtc)
 <LI><a href="#[59]">R_DTC_Close</a> from r_dtc.o(.text.R_DTC_Close) referenced from r_dtc.o(.rodata.g_transfer_on_dtc)
 <LI><a href="#[55]">R_DTC_Disable</a> from r_dtc.o(.text.R_DTC_Disable) referenced from r_dtc.o(.rodata.g_transfer_on_dtc)
 <LI><a href="#[54]">R_DTC_Enable</a> from r_dtc.o(.text.R_DTC_Enable) referenced from r_dtc.o(.rodata.g_transfer_on_dtc)
 <LI><a href="#[58]">R_DTC_InfoGet</a> from r_dtc.o(.text.R_DTC_InfoGet) referenced from r_dtc.o(.rodata.g_transfer_on_dtc)
 <LI><a href="#[51]">R_DTC_Open</a> from r_dtc.o(.text.R_DTC_Open) referenced from r_dtc.o(.rodata.g_transfer_on_dtc)
 <LI><a href="#[52]">R_DTC_Reconfigure</a> from r_dtc.o(.text.R_DTC_Reconfigure) referenced from r_dtc.o(.rodata.g_transfer_on_dtc)
 <LI><a href="#[5a]">R_DTC_Reload</a> from r_dtc.o(.text.R_DTC_Reload) referenced from r_dtc.o(.rodata.g_transfer_on_dtc)
 <LI><a href="#[53]">R_DTC_Reset</a> from r_dtc.o(.text.R_DTC_Reset) referenced from r_dtc.o(.rodata.g_transfer_on_dtc)
 <LI><a href="#[56]">R_DTC_SoftwareStart</a> from r_dtc.o(.text.R_DTC_SoftwareStart) referenced from r_dtc.o(.rodata.g_transfer_on_dtc)
 <LI><a href="#[57]">R_DTC_SoftwareStop</a> from r_dtc.o(.text.R_DTC_SoftwareStop) referenced from r_dtc.o(.rodata.g_transfer_on_dtc)
 <LI><a href="#[2f]">R_IOPORT_Close</a> from r_ioport.o(.text.R_IOPORT_Close) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2e]">R_IOPORT_Open</a> from r_ioport.o(.text.R_IOPORT_Open) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[31]">R_IOPORT_PinCfg</a> from r_ioport.o(.text.R_IOPORT_PinCfg) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[32]">R_IOPORT_PinEventInputRead</a> from r_ioport.o(.text.R_IOPORT_PinEventInputRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[33]">R_IOPORT_PinEventOutputWrite</a> from r_ioport.o(.text.R_IOPORT_PinEventOutputWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[34]">R_IOPORT_PinRead</a> from r_ioport.o(.text.R_IOPORT_PinRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[35]">R_IOPORT_PinWrite</a> from r_ioport.o(.text.R_IOPORT_PinWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[30]">R_IOPORT_PinsCfg</a> from r_ioport.o(.text.R_IOPORT_PinsCfg) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[36]">R_IOPORT_PortDirectionSet</a> from r_ioport.o(.text.R_IOPORT_PortDirectionSet) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[37]">R_IOPORT_PortEventInputRead</a> from r_ioport.o(.text.R_IOPORT_PortEventInputRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[38]">R_IOPORT_PortEventOutputWrite</a> from r_ioport.o(.text.R_IOPORT_PortEventOutputWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[39]">R_IOPORT_PortRead</a> from r_ioport.o(.text.R_IOPORT_PortRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[3a]">R_IOPORT_PortWrite</a> from r_ioport.o(.text.R_IOPORT_PortWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[40]">R_SCI_B_SPI_CallbackSet</a> from r_sci_b_spi.o(.text.R_SCI_B_SPI_CallbackSet) referenced from r_sci_b_spi.o(.rodata.g_spi_on_sci_b)
 <LI><a href="#[41]">R_SCI_B_SPI_Close</a> from r_sci_b_spi.o(.text.R_SCI_B_SPI_Close) referenced from r_sci_b_spi.o(.rodata.g_spi_on_sci_b)
 <LI><a href="#[3c]">R_SCI_B_SPI_Open</a> from r_sci_b_spi.o(.text.R_SCI_B_SPI_Open) referenced from r_sci_b_spi.o(.rodata.g_spi_on_sci_b)
 <LI><a href="#[3d]">R_SCI_B_SPI_Read</a> from r_sci_b_spi.o(.text.R_SCI_B_SPI_Read) referenced from r_sci_b_spi.o(.rodata.g_spi_on_sci_b)
 <LI><a href="#[3e]">R_SCI_B_SPI_Write</a> from r_sci_b_spi.o(.text.R_SCI_B_SPI_Write) referenced from r_sci_b_spi.o(.rodata.g_spi_on_sci_b)
 <LI><a href="#[3f]">R_SCI_B_SPI_WriteRead</a> from r_sci_b_spi.o(.text.R_SCI_B_SPI_WriteRead) referenced from r_sci_b_spi.o(.rodata.g_spi_on_sci_b)
 <LI><a href="#[63]">R_SCI_B_UART_Abort</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Abort) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[61]">R_SCI_B_UART_BaudSet</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_BaudSet) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[64]">R_SCI_B_UART_CallbackSet</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_CallbackSet) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[65]">R_SCI_B_UART_Close</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Close) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[62]">R_SCI_B_UART_InfoGet</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_InfoGet) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[5e]">R_SCI_B_UART_Open</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Open) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[5f]">R_SCI_B_UART_Read</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Read) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[66]">R_SCI_B_UART_ReadStop</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_ReadStop) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[60]">R_SCI_B_UART_Write</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Write) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text.Reset_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[7]">SVC_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[a]">SysTick_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[1e]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[1e]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[1f]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[20]">adc_callback</a> from zf_driver_adc.o(.text.adc_callback) referenced from hal_data.o(.rodata.g_adc0_cfg)
 <LI><a href="#[13]">adc_scan_end_isr</a> from r_adc.o(.text.adc_scan_end_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[42]">agt0_callback</a> from zf_driver_pit.o(.text.agt0_callback) referenced from hal_data.o(.rodata.g_timer0_cfg)
 <LI><a href="#[43]">agt1_callback</a> from hal_entry.o(.text.agt1_callback) referenced from hal_data.o(.rodata.g_timer1_cfg)
 <LI><a href="#[19]">agt_int_isr</a> from r_agt.o(.text.agt_int_isr) referenced 2 times from vector_data.o(.application_vectors)
 <LI><a href="#[14]">ceu_isr</a> from r_ceu.o(.text.ceu_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[1d]">fputc</a> from zf_common_debug.o(.text.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[1d]">fputc</a> from zf_common_debug.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[18]">sci_b_spi_eri_isr</a> from r_sci_b_spi.o(.text.sci_b_spi_eri_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[15]">sci_b_spi_rxi_isr</a> from r_sci_b_spi.o(.text.sci_b_spi_rxi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[17]">sci_b_spi_tei_isr</a> from r_sci_b_spi.o(.text.sci_b_spi_tei_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[16]">sci_b_spi_txi_isr</a> from r_sci_b_spi.o(.text.sci_b_spi_txi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[e]">sci_b_uart_eri_isr</a> from r_sci_b_uart.o(.text.sci_b_uart_eri_isr) referenced 3 times from vector_data.o(.application_vectors)
 <LI><a href="#[b]">sci_b_uart_rxi_isr</a> from r_sci_b_uart.o(.text.sci_b_uart_rxi_isr) referenced 3 times from vector_data.o(.application_vectors)
 <LI><a href="#[d]">sci_b_uart_tei_isr</a> from r_sci_b_uart.o(.text.sci_b_uart_tei_isr) referenced 3 times from vector_data.o(.application_vectors)
 <LI><a href="#[c]">sci_b_uart_txi_isr</a> from r_sci_b_uart.o(.text.sci_b_uart_txi_isr) referenced 3 times from vector_data.o(.application_vectors)
 <LI><a href="#[1a]">sdhimmc_accs_isr</a> from r_sdhi.o(.text.sdhimmc_accs_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[1b]">sdhimmc_card_isr</a> from r_sdhi.o(.text.sdhimmc_card_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[1c]">sdhimmc_dma_req_isr</a> from r_sdhi.o(.text.sdhimmc_dma_req_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[3b]">spi2_callback</a> from zf_device_ips200pro.o(.text.spi2_callback) referenced from hal_data.o(.rodata.g_sci_spi2_cfg)
 <LI><a href="#[12]">spi_b_eri_isr</a> from r_spi_b.o(.text.spi_b_eri_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[f]">spi_b_rxi_isr</a> from r_spi_b.o(.text.spi_b_rxi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[11]">spi_b_tei_isr</a> from r_spi_b.o(.text.spi_b_tei_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[10]">spi_b_txi_isr</a> from r_spi_b.o(.text.spi_b_txi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[5c]">uart3_callback</a> from zf_driver_uart.o(.text.uart3_callback) referenced from hal_data.o(.rodata.g_uart3_cfg)
 <LI><a href="#[67]">uart4_callback</a> from zf_device_wifi_uart.o(.text.uart4_callback) referenced from hal_data.o(.rodata.wifi_uart4_cfg)
 <LI><a href="#[5d]">uart9_callback</a> from zf_common_debug.o(.text.uart9_callback) referenced from hal_data.o(.rodata.g_uart9_cfg)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_BaudCalculate
</UL>

<P><STRONG><a name="[175]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
</UL>

<P><STRONG><a name="[197]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, siabs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_callback
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_parse
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_tail_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cloud_response
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_segmented_message
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tts_queue_dequeue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tts_queue_enqueue
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_rxi_isr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_transfer_callback
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_tail_buffer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[198]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_recording_state
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_press
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_receive
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_send
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_data_send
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_content_fields
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_bafa
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_clear
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cloud_response
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tts_queue_enqueue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_state_initialize
</UL>

<P><STRONG><a name="[6e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[114]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_recording_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_content_fields
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
</UL>

<P><STRONG><a name="[110]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_content_fields
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_parse_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_bafa
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_restore_wifi
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_handshake_response
</UL>

<P><STRONG><a name="[100]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_content_fields
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_parse_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cloud_response
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_handshake_response
</UL>

<P><STRONG><a name="[116]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_content_fields
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_parse_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_parse
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_handshake_response
</UL>

<P><STRONG><a name="[fe]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_recording_state
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;url_encode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_bafa
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_restore_wifi
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_page_set_title_name
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_show_string
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_handshake_response
</UL>

<P><STRONG><a name="[140]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cloud_response
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_handshake_response
</UL>

<P><STRONG><a name="[113]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_recording_state
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
</UL>

<P><STRONG><a name="[174]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
</UL>

<P><STRONG><a name="[184]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
</UL>

<P><STRONG><a name="[6f]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_segmented_message
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[19c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[19d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[19e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[19f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[73]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[77]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[76]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7d]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[1a0]"></a>Default_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bsp_group_irq.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NMI_Handler &rArr; bsp_group_irq_call
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_group_irq_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[29]"></a>R_ADC_Calibrate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, r_adc.o(.text.R_ADC_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ADC_Calibrate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[2b]"></a>R_ADC_CallbackSet</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, r_adc.o(.text.R_ADC_CallbackSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_ADC_CallbackSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[2c]"></a>R_ADC_Close</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, r_adc.o(.text.R_ADC_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R_ADC_Close &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[2d]"></a>R_ADC_InfoGet</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, r_adc.o(.text.R_ADC_InfoGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = R_ADC_InfoGet &rArr; r_adc_lowest_channel_get
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_lowest_channel_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[2a]"></a>R_ADC_OffsetSet</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, r_adc.o(.text.R_ADC_OffsetSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = R_ADC_OffsetSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[21]"></a>R_ADC_Open</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, r_adc.o(.text.R_ADC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = R_ADC_Open &rArr; r_adc_open_sub &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_irq_enable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_open_sub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[27]"></a>R_ADC_Read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, r_adc.o(.text.R_ADC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_ADC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_Read32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[28]"></a>R_ADC_Read32</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, r_adc.o(.text.R_ADC_Read32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = R_ADC_Read32 &rArr; R_ADC_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[22]"></a>R_ADC_ScanCfg</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, r_adc.o(.text.R_ADC_ScanCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = R_ADC_ScanCfg &rArr; r_adc_scan_cfg &rArr; r_adc_sensor_cfg &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_scan_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[24]"></a>R_ADC_ScanGroupStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, r_adc.o(.text.R_ADC_ScanGroupStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ADC_ScanGroupStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[23]"></a>R_ADC_ScanStart</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, r_adc.o(.text.R_ADC_ScanStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ADC_ScanStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[25]"></a>R_ADC_ScanStop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, r_adc.o(.text.R_ADC_ScanStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ADC_ScanStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[26]"></a>R_ADC_StatusGet</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, r_adc.o(.text.R_ADC_StatusGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = R_ADC_StatusGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[4f]"></a>R_AGT_CallbackSet</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, r_agt.o(.text.R_AGT_CallbackSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_AGT_CallbackSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[50]"></a>R_AGT_Close</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, r_agt.o(.text.R_AGT_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = R_AGT_Close &rArr; r_agt_common_preamble
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextSet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[4c]"></a>R_AGT_CompareMatchSet</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, r_agt.o(.text.R_AGT_CompareMatchSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = R_AGT_CompareMatchSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[49]"></a>R_AGT_Disable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, r_agt.o(.text.R_AGT_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_AGT_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[4b]"></a>R_AGT_DutyCycleSet</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, r_agt.o(.text.R_AGT_DutyCycleSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = R_AGT_DutyCycleSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[48]"></a>R_AGT_Enable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, r_agt.o(.text.R_AGT_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_AGT_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[4d]"></a>R_AGT_InfoGet</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, r_agt.o(.text.R_AGT_InfoGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = R_AGT_InfoGet &rArr; r_agt_clock_frequency_get &rArr; R_FSP_SystemClockHzGet
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_clock_frequency_get
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[44]"></a>R_AGT_Open</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, r_agt.o(.text.R_AGT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = R_AGT_Open &rArr; R_BSP_IrqCfgEnable &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_period_register_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_hardware_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[4a]"></a>R_AGT_PeriodSet</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, r_agt.o(.text.R_AGT_PeriodSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = R_AGT_PeriodSet &rArr; r_agt_period_register_set
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_period_register_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[47]"></a>R_AGT_Reset</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, r_agt.o(.text.R_AGT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_AGT_Reset &rArr; r_agt_common_preamble
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[45]"></a>R_AGT_Start</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, r_agt.o(.text.R_AGT_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = R_AGT_Start &rArr; r_agt_period_register_set
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_period_register_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[4e]"></a>R_AGT_StatusGet</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, r_agt.o(.text.R_AGT_StatusGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = R_AGT_StatusGet &rArr; r_agt_common_preamble
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[46]"></a>R_AGT_Stop</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, r_agt.o(.text.R_AGT_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = R_AGT_Stop &rArr; r_agt_common_preamble
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[8c]"></a>R_BSP_Init_RTC</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, bsp_clocks.o(.text.R_BSP_Init_RTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = R_BSP_Init_RTC &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8d]"></a>R_BSP_RegisterProtectDisable</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, bsp_register_protection.o(.text.R_BSP_RegisterProtectDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8e]"></a>R_BSP_RegisterProtectEnable</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, bsp_register_protection.o(.text.R_BSP_RegisterProtectEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_RegisterProtectEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[80]"></a>R_BSP_SoftwareDelay</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, bsp_delay.o(.text.R_BSP_SoftwareDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdram
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Close
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Open
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_SPI_Close
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_hw_config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_state_initialize
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Open
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_Close
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_sensor_cfg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_open_sub
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_clock_set_hard_reset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_sosc_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
</UL>

<P><STRONG><a name="[b8]"></a>R_BSP_SourceClockHzGet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_clocks.o(.text.R_BSP_SourceClockHzGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_SourceClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_SciClockHzGet
</UL>

<P><STRONG><a name="[10b]"></a>R_BSP_SubClockStabilizeWaitAfterReset</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_clocks.o(.text.R_BSP_SubClockStabilizeWaitAfterReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_SubClockStabilizeWaitAfterReset
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_sosc_init
</UL>

<P><STRONG><a name="[cc]"></a>R_BSP_WarmStart</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, system.o(.text.R_BSP_WarmStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_WarmStart
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5b]"></a>R_DTC_CallbackSet</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, r_dtc.o(.text.R_DTC_CallbackSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_DTC_CallbackSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dtc.o(.rodata.g_transfer_on_dtc)
</UL>
<P><STRONG><a name="[59]"></a>R_DTC_Close</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, r_dtc.o(.text.R_DTC_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_DTC_Close &rArr; r_dtc_disable_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_disable_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dtc.o(.rodata.g_transfer_on_dtc)
</UL>
<P><STRONG><a name="[55]"></a>R_DTC_Disable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, r_dtc.o(.text.R_DTC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_DTC_Disable &rArr; r_dtc_disable_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_disable_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dtc.o(.rodata.g_transfer_on_dtc)
</UL>
<P><STRONG><a name="[54]"></a>R_DTC_Enable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, r_dtc.o(.text.R_DTC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_DTC_Enable &rArr; r_dtc_prv_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_prv_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dtc.o(.rodata.g_transfer_on_dtc)
</UL>
<P><STRONG><a name="[58]"></a>R_DTC_InfoGet</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, r_dtc.o(.text.R_DTC_InfoGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_DTC_InfoGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dtc.o(.rodata.g_transfer_on_dtc)
</UL>
<P><STRONG><a name="[51]"></a>R_DTC_Open</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, r_dtc.o(.text.R_DTC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = R_DTC_Open &rArr; r_dtc_state_initialize &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_set_info
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_state_initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dtc.o(.rodata.g_transfer_on_dtc)
</UL>
<P><STRONG><a name="[52]"></a>R_DTC_Reconfigure</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, r_dtc.o(.text.R_DTC_Reconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = R_DTC_Reconfigure &rArr; r_dtc_set_info &rArr; r_dtc_block_repeat_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_prv_enable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_wait_for_transfer_complete
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_disable_transfer
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_set_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dtc.o(.rodata.g_transfer_on_dtc)
</UL>
<P><STRONG><a name="[5a]"></a>R_DTC_Reload</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, r_dtc.o(.text.R_DTC_Reload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_DTC_Reload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dtc.o(.rodata.g_transfer_on_dtc)
</UL>
<P><STRONG><a name="[53]"></a>R_DTC_Reset</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, r_dtc.o(.text.R_DTC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = R_DTC_Reset &rArr; r_dtc_wait_for_transfer_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_prv_enable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_wait_for_transfer_complete
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_disable_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dtc.o(.rodata.g_transfer_on_dtc)
</UL>
<P><STRONG><a name="[56]"></a>R_DTC_SoftwareStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, r_dtc.o(.text.R_DTC_SoftwareStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_DTC_SoftwareStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dtc.o(.rodata.g_transfer_on_dtc)
</UL>
<P><STRONG><a name="[57]"></a>R_DTC_SoftwareStop</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, r_dtc.o(.text.R_DTC_SoftwareStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_DTC_SoftwareStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_dtc.o(.rodata.g_transfer_on_dtc)
</UL>
<P><STRONG><a name="[2f]"></a>R_IOPORT_Close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, r_ioport.o(.text.R_IOPORT_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_IOPORT_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2e]"></a>R_IOPORT_Open</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_ioport.o(.text.R_IOPORT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = R_IOPORT_Open &rArr; r_ioport_pins_config &rArr; bsp_vbatt_init &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[31]"></a>R_IOPORT_PinCfg</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, r_ioport.o(.text.R_IOPORT_PinCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = R_IOPORT_PinCfg &rArr; bsp_vbatt_init &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_PinAccessDisable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pfs_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_PinAccessEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[32]"></a>R_IOPORT_PinEventInputRead</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, r_ioport.o(.text.R_IOPORT_PinEventInputRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_IOPORT_PinEventInputRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[33]"></a>R_IOPORT_PinEventOutputWrite</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, r_ioport.o(.text.R_IOPORT_PinEventOutputWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_IOPORT_PinEventOutputWrite &rArr; r_ioport_hw_pin_event_output_data_write
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_hw_pin_event_output_data_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[34]"></a>R_IOPORT_PinRead</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, r_ioport.o(.text.R_IOPORT_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[35]"></a>R_IOPORT_PinWrite</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, r_ioport.o(.text.R_IOPORT_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_IOPORT_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_reset
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[30]"></a>R_IOPORT_PinsCfg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, r_ioport.o(.text.R_IOPORT_PinsCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = R_IOPORT_PinsCfg &rArr; r_ioport_pins_config &rArr; bsp_vbatt_init &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[36]"></a>R_IOPORT_PortDirectionSet</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, r_ioport.o(.text.R_IOPORT_PortDirectionSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_IOPORT_PortDirectionSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[37]"></a>R_IOPORT_PortEventInputRead</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, r_ioport.o(.text.R_IOPORT_PortEventInputRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_IOPORT_PortEventInputRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[38]"></a>R_IOPORT_PortEventOutputWrite</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, r_ioport.o(.text.R_IOPORT_PortEventOutputWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_IOPORT_PortEventOutputWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[39]"></a>R_IOPORT_PortRead</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, r_ioport.o(.text.R_IOPORT_PortRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_IOPORT_PortRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[3a]"></a>R_IOPORT_PortWrite</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, r_ioport.o(.text.R_IOPORT_PortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_IOPORT_PortWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[40]"></a>R_SCI_B_SPI_CallbackSet</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, r_sci_b_spi.o(.text.R_SCI_B_SPI_CallbackSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_SCI_B_SPI_CallbackSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_spi.o(.rodata.g_spi_on_sci_b)
</UL>
<P><STRONG><a name="[41]"></a>R_SCI_B_SPI_Close</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, r_sci_b_spi.o(.text.R_SCI_B_SPI_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R_SCI_B_SPI_Close &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_spi.o(.rodata.g_spi_on_sci_b)
</UL>
<P><STRONG><a name="[3c]"></a>R_SCI_B_SPI_Open</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, r_sci_b_spi.o(.text.R_SCI_B_SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = R_SCI_B_SPI_Open &rArr; r_sci_b_spi_hw_config &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_hw_config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_transfer_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_spi.o(.rodata.g_spi_on_sci_b)
</UL>
<P><STRONG><a name="[3d]"></a>R_SCI_B_SPI_Read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, r_sci_b_spi.o(.text.R_SCI_B_SPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = R_SCI_B_SPI_Read &rArr; r_sci_b_spi_write_read_common &rArr; r_sci_b_spi_start_transfer &rArr; R_BSP_IrqEnableNoClear
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_write_read_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_spi.o(.rodata.g_spi_on_sci_b)
</UL>
<P><STRONG><a name="[3e]"></a>R_SCI_B_SPI_Write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, r_sci_b_spi.o(.text.R_SCI_B_SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = R_SCI_B_SPI_Write &rArr; r_sci_b_spi_write_read_common &rArr; r_sci_b_spi_start_transfer &rArr; R_BSP_IrqEnableNoClear
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_write_read_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_spi.o(.rodata.g_spi_on_sci_b)
</UL>
<P><STRONG><a name="[3f]"></a>R_SCI_B_SPI_WriteRead</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, r_sci_b_spi.o(.text.R_SCI_B_SPI_WriteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = R_SCI_B_SPI_WriteRead &rArr; r_sci_b_spi_write_read_common &rArr; r_sci_b_spi_start_transfer &rArr; R_BSP_IrqEnableNoClear
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_write_read_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_spi.o(.rodata.g_spi_on_sci_b)
</UL>
<P><STRONG><a name="[63]"></a>R_SCI_B_UART_Abort</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_SCI_B_UART_Abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[c4]"></a>R_SCI_B_UART_BaudCalculate</STRONG> (Thumb, 576 bytes, Stack size 80 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_BaudCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = R_SCI_B_UART_BaudCalculate &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_SciClockHzGet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[61]"></a>R_SCI_B_UART_BaudSet</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_BaudSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_SCI_B_UART_BaudSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[64]"></a>R_SCI_B_UART_CallbackSet</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_CallbackSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_SCI_B_UART_CallbackSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[65]"></a>R_SCI_B_UART_Close</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R_SCI_B_UART_Close &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[62]"></a>R_SCI_B_UART_InfoGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_InfoGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_SCI_B_UART_InfoGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[5e]"></a>R_SCI_B_UART_Open</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = R_SCI_B_UART_Open &rArr; r_sci_b_irqs_cfg &rArr; r_sci_b_irq_cfg &rArr; R_BSP_IrqCfg &rArr; R_FSP_IsrContextSet
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_config_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_irqs_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[5f]"></a>R_SCI_B_UART_Read</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_SCI_B_UART_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[66]"></a>R_SCI_B_UART_ReadStop</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_ReadStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = R_SCI_B_UART_ReadStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[60]"></a>R_SCI_B_UART_Write</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_SCI_B_UART_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, startup.o(.text.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 7480<LI>Call Chain = Reset_Handler &rArr; main &rArr; hal_entry &rArr; audio_loop &rArr; process_recording_state &rArr; send_message_to_bafa &rArr; connect_bafa_cloud &rArr; check_and_restore_wifi &rArr; wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[ca]"></a>SwitchToGbk</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, utf8togbk.o(.text.SwitchToGbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SwitchToGbk &rArr; fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_utf8_text_to_tts
</UL>

<P><STRONG><a name="[d2]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, bsp_clocks.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_clock_set_hard_reset
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_freq_var_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c8]"></a>SystemInit</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, system.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemInit &rArr; bsp_clock_init &rArr; bsp_prv_clock_set_hard_reset &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_irq_cfg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_WarmStart
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_dtcm
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_itcm
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[20]"></a>adc_callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, zf_driver_adc.o(.text.adc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_adc0_cfg)
</UL>
<P><STRONG><a name="[d9]"></a>adc_get_mic</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, zf_driver_adc.o(.text.adc_get_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_get_mic
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_callback
</UL>

<P><STRONG><a name="[177]"></a>adc_get_random</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, zf_driver_adc.o(.text.adc_get_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_get_random
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_create_frame
</UL>

<P><STRONG><a name="[ec]"></a>adc_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, zf_driver_adc.o(.text.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[13]"></a>adc_scan_end_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, r_adc.o(.text.adc_scan_end_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = adc_scan_end_isr &rArr; r_adc_scan_end_common_isr &rArr; r_adc_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_scan_end_common_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[42]"></a>agt0_callback</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, zf_driver_pit.o(.text.agt0_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = agt0_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_timer0_cfg)
</UL>
<P><STRONG><a name="[43]"></a>agt1_callback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hal_entry.o(.text.agt1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = agt1_callback &rArr; audio_callback &rArr; ips200pro_label_show_string &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_timer1_cfg)
</UL>
<P><STRONG><a name="[19]"></a>agt_int_isr</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, r_agt.o(.text.agt_int_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = agt_int_isr &rArr; R_FSP_CurrentIrqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[d6]"></a>audio_callback</STRONG> (Thumb, 476 bytes, Stack size 8 bytes, asr_audio.o(.text.audio_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = audio_callback &rArr; ips200pro_label_show_string &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_mic
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_show_string
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agt1_callback
</UL>

<P><STRONG><a name="[de]"></a>audio_data_send</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, asr_audio.o(.text.audio_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = audio_data_send &rArr; base64_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_used
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
</UL>

<P><STRONG><a name="[e3]"></a>audio_init</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, asr_audio.o(.text.audio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 3200<LI>Call Chain = audio_init &rArr; websocket_get_url &rArr; hmac_sha256 &rArr; hmac_sha256_init &rArr; sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_ms
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_mode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_printf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_create
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_set_color
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_set_default_font
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_set_direction
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_set_format
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_disable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_enable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_show_string
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[f7]"></a>audio_loop</STRONG> (Thumb, 606 bytes, Stack size 32 bytes, asr_audio.o(.text.audio_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 7184<LI>Call Chain = audio_loop &rArr; process_recording_state &rArr; send_message_to_bafa &rArr; connect_bafa_cloud &rArr; check_and_restore_wifi &rArr; wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_recording_state
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_press
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_receive
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_data_send
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_content_fields
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_bafa_temporarily
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_restore_wifi
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_show_string
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[e1]"></a>base64_encode</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, base64.o(.text.base64_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = base64_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_data_send
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
</UL>

<P><STRONG><a name="[cd]"></a>bsp_clock_init</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, bsp_clocks.o(.text.bsp_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_clock_init &rArr; bsp_prv_clock_set_hard_reset &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_peripheral_clock_set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_clock_set_hard_reset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_sosc_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_freq_var_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_FlashCacheEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d4]"></a>bsp_init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_common.o(.text.bsp_init_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1a1]"></a>bsp_init_internal</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_common.o(.text.bsp_init_internal), UNUSED)

<P><STRONG><a name="[d3]"></a>bsp_irq_cfg</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, bsp_irq.o(.text.bsp_irq_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsp_irq_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b0]"></a>bsp_prv_software_delay_loop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_delay.o(.text.bsp_prv_software_delay_loop))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
</UL>

<P><STRONG><a name="[14]"></a>ceu_isr</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, r_ceu.o(.text.ceu_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceu_isr &rArr; ceu_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceu_call_callback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[fc]"></a>check_and_restore_wifi</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, asr_audio.o(.text.check_and_restore_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = check_and_restore_wifi &rArr; wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_disconnect_link
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
</UL>

<P><STRONG><a name="[112]"></a>check_bafa_reply</STRONG> (Thumb, 1506 bytes, Stack size 1144 bytes, asr_audio.o(.text.check_bafa_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 2624<LI>Call Chain = check_bafa_reply &rArr; process_cloud_response &rArr; process_tts_queue &rArr; send_utf8_text_to_tts &rArr; SwitchToGbk &rArr; fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_message
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cloud_response
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;starts_with
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_show_string
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
</UL>

<P><STRONG><a name="[f5]"></a>connect_bafa_cloud</STRONG> (Thumb, 612 bytes, Stack size 168 bytes, asr_audio.o(.text.connect_bafa_cloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = connect_bafa_cloud &rArr; check_and_restore_wifi &rArr; wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_restore_wifi
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_read_buffer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_disconnect_link
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_recording_state
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_bafa
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[127]"></a>debug_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zf_common_debug.o(.text.debug_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[fb]"></a>disconnect_bafa_temporarily</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, asr_audio.o(.text.disconnect_bafa_temporarily))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = disconnect_bafa_temporarily &rArr; wifi_uart_disconnect_link &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_disconnect_link
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_press
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
</UL>

<P><STRONG><a name="[102]"></a>extract_content_fields</STRONG> (Thumb, 268 bytes, Stack size 2352 bytes, asr_audio.o(.text.extract_content_fields))
<BR><BR>[Stack]<UL><LI>Max Depth = 2516<LI>Call Chain = extract_content_fields &rArr; ips200pro_label_show_string &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_show_string
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
</UL>

<P><STRONG><a name="[11e]"></a>fifo_clear</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, zf_common_fifo.o(.text.fifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>

<P><STRONG><a name="[f0]"></a>fifo_init</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, zf_common_fifo.o(.text.fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[e0]"></a>fifo_read_buffer</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, zf_common_fifo.o(.text.fifo_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fifo_read_buffer &rArr; fifo_end_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_used
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_end_offset
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_data_send
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_read_buffer
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_mac
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_ip
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
</UL>

<P><STRONG><a name="[121]"></a>fifo_read_tail_buffer</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, zf_common_fifo.o(.text.fifo_read_tail_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fifo_read_tail_buffer &rArr; fifo_end_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_used
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_end_offset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
</UL>

<P><STRONG><a name="[df]"></a>fifo_used</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, zf_common_fifo.o(.text.fifo_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fifo_used
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_data_send
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_tail_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
</UL>

<P><STRONG><a name="[db]"></a>fifo_write_buffer</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, zf_common_fifo.o(.text.fifo_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fifo_write_buffer &rArr; fifo_head_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_head_offset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_callback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_callback
</UL>

<P><STRONG><a name="[1d]"></a>fputc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, zf_common_debug.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[186]"></a>func_int_to_str</STRONG> (Thumb, 218 bytes, Stack size 36 bytes, zf_common_function.o(.text.func_int_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = func_int_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
</UL>

<P><STRONG><a name="[13e]"></a>func_soft_delay</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, zf_common_function.o(.text.func_soft_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = func_soft_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_wait_idle
</UL>

<P><STRONG><a name="[f6]"></a>get_system_time_ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, asr_audio.o(.text.get_system_time_ms))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[123]"></a>gpio_get_level</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, zf_driver_gpio.o(.text.gpio_get_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_press
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_wait_idle
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
</UL>

<P><STRONG><a name="[124]"></a>gpio_set_level</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, zf_driver_gpio.o(.text.gpio_set_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_set_level &rArr; R_IOPORT_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_send_buffer
</UL>

<P><STRONG><a name="[125]"></a>hal_entry</STRONG> (Thumb, 206 bytes, Stack size 272 bytes, hal_entry.o(.text.hal_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 7456<LI>Call Chain = hal_entry &rArr; audio_loop &rArr; process_recording_state &rArr; send_message_to_bafa &rArr; connect_bafa_cloud &rArr; check_and_restore_wifi &rArr; wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdram
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_read_data
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_response
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>handle_button_press</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, asr_audio.o(.text.handle_button_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = handle_button_press &rArr; ips200pro_label_show_string &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_bafa_temporarily
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_show_string
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
</UL>

<P><STRONG><a name="[103]"></a>handle_end_of_recognition</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, asr_audio.o(.text.handle_end_of_recognition))
<BR><BR>[Stack]<UL><LI>Max Depth = 2532<LI>Call Chain = handle_end_of_recognition &rArr; extract_content_fields &rArr; ips200pro_label_show_string &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_close
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_receive
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_send
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_data_send
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_content_fields
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_disable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_show_string
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
</UL>

<P><STRONG><a name="[12c]"></a>hmac_sha256</STRONG> (Thumb, 50 bytes, Stack size 264 bytes, hmac_sha256.o(.text.hmac_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = hmac_sha256 &rArr; hmac_sha256_init &rArr; sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_final
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_update
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
</UL>

<P><STRONG><a name="[12f]"></a>hmac_sha256_final</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, hmac_sha256.o(.text.hmac_sha256_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = hmac_sha256_final &rArr; sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
</UL>

<P><STRONG><a name="[12d]"></a>hmac_sha256_init</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, hmac_sha256.o(.text.hmac_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = hmac_sha256_init &rArr; sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
</UL>

<P><STRONG><a name="[12e]"></a>hmac_sha256_update</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, hmac_sha256.o(.text.hmac_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = hmac_sha256_update &rArr; sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
</UL>

<P><STRONG><a name="[126]"></a>init_sdram</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, ra_driver_sdram.o(.text.init_sdram))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_sdram &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[133]"></a>ips200pro_create_widgets</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, zf_device_ips200pro.o(.text.ips200pro_create_widgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ips200pro_create_widgets &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_create
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_page_create
</UL>

<P><STRONG><a name="[e4]"></a>ips200pro_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, zf_device_ips200pro.o(.text.ips200pro_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ips200pro_init &rArr; ips200pro_page_create &rArr; ips200pro_page_set_title_name &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_page_set_title_position_width
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_page_create
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_set_optimize
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_set_default_font
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_set_format
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[e8]"></a>ips200pro_label_create</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, zf_device_ips200pro.o(.text.ips200pro_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ips200pro_label_create &rArr; ips200pro_create_widgets &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_create_widgets
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[ea]"></a>ips200pro_label_mode</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, zf_device_ips200pro.o(.text.ips200pro_label_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ips200pro_label_mode &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[eb]"></a>ips200pro_label_printf</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, zf_device_ips200pro.o(.text.ips200pro_label_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ips200pro_label_printf &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[dd]"></a>ips200pro_label_show_string</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, zf_device_ips200pro.o(.text.ips200pro_label_show_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ips200pro_label_show_string &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_recording_state
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_press
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_content_fields
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_callback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cloud_response
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_queue
</UL>

<P><STRONG><a name="[137]"></a>ips200pro_page_create</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, zf_device_ips200pro.o(.text.ips200pro_page_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ips200pro_page_create &rArr; ips200pro_page_set_title_name &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_page_switch
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_page_set_title_name
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_create_widgets
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_init
</UL>

<P><STRONG><a name="[139]"></a>ips200pro_page_set_title_name</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, zf_device_ips200pro.o(.text.ips200pro_page_set_title_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ips200pro_page_set_title_name &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_page_create
</UL>

<P><STRONG><a name="[135]"></a>ips200pro_page_set_title_position_width</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, zf_device_ips200pro.o(.text.ips200pro_page_set_title_position_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ips200pro_page_set_title_position_width &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_init
</UL>

<P><STRONG><a name="[13a]"></a>ips200pro_page_switch</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, zf_device_ips200pro.o(.text.ips200pro_page_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ips200pro_page_switch &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_page_create
</UL>

<P><STRONG><a name="[13b]"></a>ips200pro_send_buffer</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, zf_device_ips200pro.o(.text.ips200pro_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_time_out
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_wait_idle
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
</UL>

<P><STRONG><a name="[e9]"></a>ips200pro_set_color</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, zf_device_ips200pro.o(.text.ips200pro_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ips200pro_set_color &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[e7]"></a>ips200pro_set_default_font</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, zf_device_ips200pro.o(.text.ips200pro_set_default_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ips200pro_set_default_font &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[e5]"></a>ips200pro_set_direction</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, zf_device_ips200pro.o(.text.ips200pro_set_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ips200pro_set_direction &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[e6]"></a>ips200pro_set_format</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, zf_device_ips200pro.o(.text.ips200pro_set_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ips200pro_set_format &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[136]"></a>ips200pro_set_optimize</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, zf_device_ips200pro.o(.text.ips200pro_set_optimize))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ips200pro_set_optimize &rArr; ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_init
</UL>

<P><STRONG><a name="[134]"></a>ips200pro_write_packet</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, zf_device_ips200pro.o(.text.ips200pro_write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ips200pro_write_packet &rArr; ips200pro_send_buffer &rArr; ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_send_buffer
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_mode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_printf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_page_set_title_position_width
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_page_switch
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_page_set_title_name
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_set_color
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_create_widgets
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_set_optimize
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_set_default_font
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_set_direction
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_set_format
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_show_string
</UL>

<P><STRONG><a name="[c9]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 7472<LI>Call Chain = main &rArr; hal_entry &rArr; audio_loop &rArr; process_recording_state &rArr; send_message_to_bafa &rArr; connect_bafa_cloud &rArr; check_and_restore_wifi &rArr; wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[141]"></a>parse_segmented_message</STRONG> (Thumb, 650 bytes, Stack size 64 bytes, hal_entry.o(.text.parse_segmented_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = parse_segmented_message &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cloud_response
</UL>

<P><STRONG><a name="[f1]"></a>pit_disable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, zf_driver_pit.o(.text.pit_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pit_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[f4]"></a>pit_enable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, zf_driver_pit.o(.text.pit_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pit_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[ef]"></a>pit_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, zf_driver_pit.o(.text.pit_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[117]"></a>process_cloud_response</STRONG> (Thumb, 604 bytes, Stack size 856 bytes, hal_entry.o(.text.process_cloud_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = process_cloud_response &rArr; process_tts_queue &rArr; send_utf8_text_to_tts &rArr; SwitchToGbk &rArr; fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_segmented_message
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;starts_with
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_show_string
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_queue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tts_queue_enqueue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
</UL>

<P><STRONG><a name="[f9]"></a>process_idle_state</STRONG> (Thumb, 826 bytes, Stack size 152 bytes, asr_audio.o(.text.process_idle_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 2776<LI>Call Chain = process_idle_state &rArr; check_bafa_reply &rArr; process_cloud_response &rArr; process_tts_queue &rArr; send_utf8_text_to_tts &rArr; SwitchToGbk &rArr; fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_restore_wifi
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_ms
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_read_buffer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
</UL>

<P><STRONG><a name="[fa]"></a>process_recording_state</STRONG> (Thumb, 442 bytes, Stack size 2064 bytes, asr_audio.o(.text.process_recording_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 7152<LI>Call Chain = process_recording_state &rArr; send_message_to_bafa &rArr; connect_bafa_cloud &rArr; check_and_restore_wifi &rArr; wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_bafa
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_show_string
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
</UL>

<P><STRONG><a name="[115]"></a>process_tts_message</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hal_entry.o(.text.process_tts_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = process_tts_message &rArr; send_utf8_text_to_tts &rArr; SwitchToGbk &rArr; fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;starts_with
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_utf8_text_to_tts
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
</UL>

<P><STRONG><a name="[143]"></a>process_tts_queue</STRONG> (Thumb, 92 bytes, Stack size 272 bytes, hal_entry.o(.text.process_tts_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = process_tts_queue &rArr; send_utf8_text_to_tts &rArr; SwitchToGbk &rArr; fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_utf8_text_to_tts
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_show_string
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tts_queue_dequeue
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tts_queue_is_empty
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_response
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cloud_response
</UL>

<P><STRONG><a name="[12a]"></a>process_tts_response</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, hal_entry.o(.text.process_tts_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = process_tts_response &rArr; process_tts_queue &rArr; send_utf8_text_to_tts &rArr; SwitchToGbk &rArr; fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_queue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[158]"></a>r_sdhi_transfer_callback</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, r_sdhi.o(.text.r_sdhi_transfer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = r_sdhi_transfer_callback &rArr; r_sdhi_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_call_callback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_transfer_end
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_dma_req_isr
</UL>

<P><STRONG><a name="[18]"></a>sci_b_spi_eri_isr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, r_sci_b_spi.o(.text.sci_b_spi_eri_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sci_b_spi_eri_isr &rArr; r_sci_b_spi_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_call_callback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[15]"></a>sci_b_spi_rxi_isr</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, r_sci_b_spi.o(.text.sci_b_spi_rxi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sci_b_spi_rxi_isr &rArr; R_FSP_CurrentIrqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_transmit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[17]"></a>sci_b_spi_tei_isr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, r_sci_b_spi.o(.text.sci_b_spi_tei_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sci_b_spi_tei_isr &rArr; r_sci_b_spi_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_call_callback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[16]"></a>sci_b_spi_txi_isr</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, r_sci_b_spi.o(.text.sci_b_spi_txi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sci_b_spi_txi_isr &rArr; R_FSP_CurrentIrqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_transmit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[e]"></a>sci_b_uart_eri_isr</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, r_sci_b_uart.o(.text.sci_b_uart_eri_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sci_b_uart_eri_isr &rArr; r_sci_b_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_call_callback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[b]"></a>sci_b_uart_rxi_isr</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, r_sci_b_uart.o(.text.sci_b_uart_rxi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sci_b_uart_rxi_isr &rArr; r_sci_b_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_call_callback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[d]"></a>sci_b_uart_tei_isr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.sci_b_uart_tei_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sci_b_uart_tei_isr &rArr; r_sci_b_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_call_callback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[c]"></a>sci_b_uart_txi_isr</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, r_sci_b_uart.o(.text.sci_b_uart_txi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sci_b_uart_txi_isr &rArr; r_sci_b_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_call_callback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[1a]"></a>sdhimmc_accs_isr</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, r_sdhi.o(.text.sdhimmc_accs_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sdhimmc_accs_isr &rArr; r_sdhi_access_irq_process &rArr; r_sdhi_transfer_end
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_call_callback
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_access_irq_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[1b]"></a>sdhimmc_card_isr</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, r_sdhi.o(.text.sdhimmc_card_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sdhimmc_card_isr &rArr; r_sdhi_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_call_callback
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[1c]"></a>sdhimmc_dma_req_isr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, r_sdhi.o(.text.sdhimmc_dma_req_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sdhimmc_dma_req_isr &rArr; r_sdhi_transfer_callback &rArr; r_sdhi_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_transfer_callback
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[144]"></a>send_heartbeat</STRONG> (Thumb, 90 bytes, Stack size 152 bytes, asr_audio.o(.text.send_heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = send_heartbeat &rArr; wifi_uart_send_buffer &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_read_buffer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
</UL>

<P><STRONG><a name="[145]"></a>send_message_to_bafa</STRONG> (Thumb, 720 bytes, Stack size 4408 bytes, asr_audio.o(.text.send_message_to_bafa))
<BR><BR>[Stack]<UL><LI>Max Depth = 5088<LI>Call Chain = send_message_to_bafa &rArr; connect_bafa_cloud &rArr; check_and_restore_wifi &rArr; wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_read_buffer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_recording_state
</UL>

<P><STRONG><a name="[146]"></a>send_utf8_text_to_tts</STRONG> (Thumb, 208 bytes, Stack size 280 bytes, hal_entry.o(.text.send_utf8_text_to_tts))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = send_utf8_text_to_tts &rArr; SwitchToGbk &rArr; fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_write_buffer
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToGbk
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_message
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_queue
</UL>

<P><STRONG><a name="[164]"></a>sha1_final</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, sha1.o(.text.sha1_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sha1_final &rArr; sha1_update &rArr; sha1_process_block
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hash
</UL>

<P><STRONG><a name="[166]"></a>sha1_hash</STRONG> (Thumb, 40 bytes, Stack size 120 bytes, sha1.o(.text.sha1_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = sha1_hash &rArr; sha1_final &rArr; sha1_update &rArr; sha1_process_block
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_final
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
</UL>

<P><STRONG><a name="[167]"></a>sha1_init</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, sha1.o(.text.sha1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sha1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hash
</UL>

<P><STRONG><a name="[165]"></a>sha1_update</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, sha1.o(.text.sha1_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sha1_update &rArr; sha1_process_block
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_block
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hash
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_final
</UL>

<P><STRONG><a name="[130]"></a>sha256_final</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, hmac_sha256.o(.text.sha256_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sha256_final &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transform
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_final
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
</UL>

<P><STRONG><a name="[132]"></a>sha256_init</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, hmac_sha256.o(.text.sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>

<P><STRONG><a name="[131]"></a>sha256_update</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, hmac_sha256.o(.text.sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transform
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_final
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_update
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_init
</UL>

<P><STRONG><a name="[3b]"></a>spi2_callback</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, zf_device_ips200pro.o(.text.spi2_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi2_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_sci_spi2_cfg)
</UL>
<P><STRONG><a name="[12]"></a>spi_b_eri_isr</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, r_spi_b.o(.text.spi_b_eri_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = spi_b_eri_isr &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_spi_b_call_callback
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[f]"></a>spi_b_rxi_isr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, r_spi_b.o(.text.spi_b_rxi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_b_rxi_isr &rArr; R_BSP_IrqEnableNoClear
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnableNoClear
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_spi_b_transmit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_spi_b_receive
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[11]"></a>spi_b_tei_isr</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, r_spi_b.o(.text.spi_b_tei_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi_b_tei_isr &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_spi_b_call_callback
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[10]"></a>spi_b_txi_isr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, r_spi_b.o(.text.spi_b_txi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_b_txi_isr &rArr; R_FSP_CurrentIrqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[118]"></a>starts_with</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, hal_entry.o(.text.starts_with))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = starts_with
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_message
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cloud_response
</UL>

<P><STRONG><a name="[f3]"></a>system_delay_ms</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, zf_driver_delay.o(.text.system_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_bafa
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_bafa_temporarily
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_restore_wifi
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_reset
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_response
</UL>

<P><STRONG><a name="[ed]"></a>time_get_data</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, asr_audio.o(.text.time_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = time_get_data &rArr; connect_bafa_cloud &rArr; check_and_restore_wifi &rArr; wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_parse_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_read_buffer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_disconnect_link
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[170]"></a>time_parse_data</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, asr_audio.o(.text.time_parse_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = time_parse_data &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
</UL>

<P><STRONG><a name="[148]"></a>tts_queue_dequeue</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, hal_entry.o(.text.tts_queue_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tts_queue_dequeue &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tts_queue_is_empty
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_queue
</UL>

<P><STRONG><a name="[142]"></a>tts_queue_enqueue</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, hal_entry.o(.text.tts_queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tts_queue_enqueue &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tts_queue_is_full
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cloud_response
</UL>

<P><STRONG><a name="[147]"></a>tts_queue_is_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_entry.o(.text.tts_queue_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_queue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tts_queue_dequeue
</UL>

<P><STRONG><a name="[171]"></a>tts_queue_is_full</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_entry.o(.text.tts_queue_is_full))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tts_queue_enqueue
</UL>

<P><STRONG><a name="[5c]"></a>uart3_callback</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, zf_driver_uart.o(.text.uart3_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart3_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_uart3_cfg)
</UL>
<P><STRONG><a name="[128]"></a>uart3_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zf_driver_uart.o(.text.uart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart3_init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[129]"></a>uart3_read_data</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, hal_entry.o(.text.uart3_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart3_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[163]"></a>uart3_write_buffer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, zf_driver_uart.o(.text.uart3_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart3_write_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_utf8_text_to_tts
</UL>

<P><STRONG><a name="[67]"></a>uart4_callback</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, zf_device_wifi_uart.o(.text.uart4_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart4_callback &rArr; fifo_write_buffer &rArr; fifo_head_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.wifi_uart4_cfg)
</UL>
<P><STRONG><a name="[5d]"></a>uart9_callback</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, zf_common_debug.o(.text.uart9_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart9_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_uart9_cfg)
</UL>
<P><STRONG><a name="[173]"></a>url_encode</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, websocket_client.o(.text.url_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = url_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
</UL>

<P><STRONG><a name="[12b]"></a>websocket_client_close</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, websocket_client.o(.text.websocket_client_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = websocket_client_close &rArr; wifi_uart_disconnect_link &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_disconnect_link
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
</UL>

<P><STRONG><a name="[fd]"></a>websocket_client_connect</STRONG> (Thumb, 688 bytes, Stack size 3768 bytes, websocket_client.o(.text.websocket_client_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4324<LI>Call Chain = websocket_client_connect &rArr; sha1_hash &rArr; sha1_final &rArr; sha1_update &rArr; sha1_process_block
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_read_buffer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_handshake_response
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_handshake_request
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_hash
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
</UL>

<P><STRONG><a name="[101]"></a>websocket_client_receive</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, websocket_client.o(.text.websocket_client_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = websocket_client_receive &rArr; wifi_uart_read_buffer &rArr; fifo_read_buffer &rArr; fifo_end_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_read_buffer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
</UL>

<P><STRONG><a name="[ff]"></a>websocket_client_send</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, websocket_client.o(.text.websocket_client_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = websocket_client_send &rArr; wifi_uart_send_buffer &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_create_frame
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
</UL>

<P><STRONG><a name="[176]"></a>websocket_create_frame</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, websocket_client.o(.text.websocket_create_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = websocket_create_frame &rArr; adc_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_random
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_send
</UL>

<P><STRONG><a name="[ee]"></a>websocket_get_url</STRONG> (Thumb, 498 bytes, Stack size 2480 bytes, asr_audio.o(.text.websocket_get_url))
<BR><BR>[Stack]<UL><LI>Max Depth = 3152<LI>Call Chain = websocket_get_url &rArr; hmac_sha256 &rArr; hmac_sha256_init &rArr; sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;url_encode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[119]"></a>wifi_uart_connect_tcp_servers</STRONG> (Thumb, 442 bytes, Stack size 168 bytes, zf_device_wifi_uart.o(.text.wifi_uart_connect_tcp_servers))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wifi_uart_connect_tcp_servers &rArr; wifi_uart_set_transfer_model &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_entry_serianet
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_transfer_model
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_connect_model
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
</UL>

<P><STRONG><a name="[111]"></a>wifi_uart_disconnect_link</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, zf_device_wifi_uart.o(.text.wifi_uart_disconnect_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wifi_uart_disconnect_link &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_close
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_bafa_temporarily
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_restore_wifi
</UL>

<P><STRONG><a name="[17e]"></a>wifi_uart_entry_serianet</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, zf_device_wifi_uart.o(.text.wifi_uart_entry_serianet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wifi_uart_entry_serianet &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
</UL>

<P><STRONG><a name="[f2]"></a>wifi_uart_init</STRONG> (Thumb, 376 bytes, Stack size 80 bytes, zf_device_wifi_uart.o(.text.wifi_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_BaudCalculate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_model
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_reset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_information
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_wifi
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_auto_connect_wifi
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_echo_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_uart_config_set
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_int_to_str
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_restore_wifi
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
</UL>

<P><STRONG><a name="[11a]"></a>wifi_uart_read_buffer</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, zf_device_wifi_uart.o(.text.wifi_uart_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wifi_uart_read_buffer &rArr; fifo_read_buffer &rArr; fifo_end_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_receive
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_bafa
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
</UL>

<P><STRONG><a name="[185]"></a>wifi_uart_reset</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, zf_device_wifi_uart.o(.text.wifi_uart_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wifi_uart_reset &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinWrite
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[11c]"></a>wifi_uart_send_buffer</STRONG> (Thumb, 382 bytes, Stack size 64 bytes, zf_device_wifi_uart.o(.text.wifi_uart_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wifi_uart_send_buffer &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_buffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_int_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_send
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_bafa
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
</UL>

<P><STRONG><a name="[188]"></a>wifi_uart_set_model</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, zf_device_wifi_uart.o(.text.wifi_uart_set_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wifi_uart_set_model &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[18c]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a2]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[1a3]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[1a4]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[cb]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchToGbk
</UL>

<P><STRONG><a name="[18e]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a5]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1a6]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1a7]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[dc]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_recording_state
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_button_press
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_end_of_recognition
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_content_fields
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bafa_reply
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_bafa
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_bafa_temporarily
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_restore_wifi
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_callback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_loop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_response
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_message
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cloud_response
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_segmented_message
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_utf8_text_to_tts
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tts_queue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tts_queue_dequeue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tts_queue_enqueue
</UL>

<P><STRONG><a name="[18f]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a8]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1a9]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1aa]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[e2]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_data_send
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_get_url
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_get_data
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_handshake_request
</UL>

<P><STRONG><a name="[190]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ab]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ac]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ad]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[11b]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_idle_state
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_bafa
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heartbeat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_bafa_cloud
</UL>

<P><STRONG><a name="[191]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ae]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1af]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1b0]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[138]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_label_printf
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1b1]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[122]"></a>fifo_head_offset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, zf_common_fifo.o(.text.fifo_head_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_head_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
</UL>

<P><STRONG><a name="[120]"></a>fifo_end_offset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, zf_common_fifo.o(.text.fifo_end_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_end_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_tail_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
</UL>

<P><STRONG><a name="[17a]"></a>wifi_uart_clear_receive_buffer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, zf_device_wifi_uart.o(.text.wifi_uart_clear_receive_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_uart_clear_receive_buffer &rArr; fifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_disconnect_link
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_entry_serianet
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_model
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_reset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_mac
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_ip
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_wifi
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_auto_connect_wifi
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_echo_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_uart_config_set
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_transfer_model
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_connect_model
</UL>

<P><STRONG><a name="[172]"></a>uart_write_string</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, zf_device_wifi_uart.o(.text.uart_write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_write_string
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_disconnect_link
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_entry_serianet
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_model
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_mac
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_ip
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_wifi
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_auto_connect_wifi
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_echo_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_uart_config_set
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_transfer_model
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_connect_model
</UL>

<P><STRONG><a name="[17b]"></a>wifi_uart_wait_ack</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, zf_device_wifi_uart.o(.text.wifi_uart_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_tail_buffer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_disconnect_link
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_entry_serianet
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_model
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_reset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_mac
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_ip
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_wifi
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_auto_connect_wifi
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_echo_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_uart_config_set
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_transfer_model
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_connect_model
</UL>

<P><STRONG><a name="[17c]"></a>wifi_uart_set_connect_model</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, zf_device_wifi_uart.o(.text.wifi_uart_set_connect_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wifi_uart_set_connect_model &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
</UL>

<P><STRONG><a name="[17d]"></a>wifi_uart_set_transfer_model</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, zf_device_wifi_uart.o(.text.wifi_uart_set_transfer_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wifi_uart_set_transfer_model &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
</UL>

<P><STRONG><a name="[18b]"></a>uart_write_byte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, zf_device_wifi_uart.o(.text.uart_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
</UL>

<P><STRONG><a name="[18a]"></a>uart_write_buffer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, zf_device_wifi_uart.o(.text.uart_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_write_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
</UL>

<P><STRONG><a name="[187]"></a>wifi_uart_uart_config_set</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, zf_device_wifi_uart.o(.text.wifi_uart_uart_config_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wifi_uart_uart_config_set &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[17f]"></a>wifi_uart_echo_set</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, zf_device_wifi_uart.o(.text.wifi_uart_echo_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wifi_uart_echo_set &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[179]"></a>wifi_uart_auto_connect_wifi</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, zf_device_wifi_uart.o(.text.wifi_uart_auto_connect_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wifi_uart_auto_connect_wifi &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[189]"></a>wifi_uart_set_wifi</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, zf_device_wifi_uart.o(.text.wifi_uart_set_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wifi_uart_set_wifi &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[180]"></a>wifi_uart_get_information</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, zf_device_wifi_uart.o(.text.wifi_uart_get_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_mac
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_ip
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[181]"></a>wifi_uart_get_version</STRONG> (Thumb, 150 bytes, Stack size 288 bytes, zf_device_wifi_uart.o(.text.wifi_uart_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_parse
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_information
</UL>

<P><STRONG><a name="[182]"></a>wifi_uart_get_ip</STRONG> (Thumb, 196 bytes, Stack size 152 bytes, zf_device_wifi_uart.o(.text.wifi_uart_get_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wifi_uart_get_ip &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_parse
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_information
</UL>

<P><STRONG><a name="[183]"></a>wifi_uart_get_mac</STRONG> (Thumb, 136 bytes, Stack size 88 bytes, zf_device_wifi_uart.o(.text.wifi_uart_get_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wifi_uart_get_mac &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_parse
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_information
</UL>

<P><STRONG><a name="[178]"></a>wifi_data_parse</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, zf_device_wifi_uart.o(.text.wifi_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_data_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_mac
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_ip
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
</UL>

<P><STRONG><a name="[13c]"></a>ips200pro_wait_idle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, zf_device_ips200pro.o(.text.ips200pro_wait_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ips200pro_wait_idle &rArr; gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_soft_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_send_buffer
</UL>

<P><STRONG><a name="[13d]"></a>spi2_time_out</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, zf_device_ips200pro.o(.text.spi2_time_out))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ips200pro_send_buffer
</UL>

<P><STRONG><a name="[169]"></a>sha256_transform</STRONG> (Thumb, 422 bytes, Stack size 320 bytes, hmac_sha256.o(.text.sha256_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sha256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>

<P><STRONG><a name="[168]"></a>sha1_process_block</STRONG> (Thumb, 460 bytes, Stack size 364 bytes, sha1.o(.text.sha1_process_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = sha1_process_block
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update
</UL>

<P><STRONG><a name="[11d]"></a>create_handshake_request</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, websocket_client.o(.text.create_handshake_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = create_handshake_request &rArr; snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
</UL>

<P><STRONG><a name="[13f]"></a>parse_handshake_response</STRONG> (Thumb, 132 bytes, Stack size 168 bytes, websocket_client.o(.text.parse_handshake_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = parse_handshake_response &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;websocket_client_connect
</UL>

<P><STRONG><a name="[d0]"></a>bsp_init_itcm</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, system.o(.text.bsp_init_itcm))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_init_itcm &rArr; memcpy_64
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_64
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d1]"></a>bsp_init_dtcm</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, system.o(.text.bsp_init_dtcm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_init_dtcm &rArr; memcpy_64
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_64
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_64
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[109]"></a>memcpy_64</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, system.o(.text.memcpy_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memcpy_64
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_dtcm
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_itcm
</UL>

<P><STRONG><a name="[10a]"></a>memset_64</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, system.o(.text.memset_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memset_64
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_dtcm
</UL>

<P><STRONG><a name="[105]"></a>R_BSP_FlashCacheEnable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_clocks.o(.text.R_BSP_FlashCacheEnable))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
</UL>

<P><STRONG><a name="[104]"></a>bsp_clock_freq_var_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp_clocks.o(.text.bsp_clock_freq_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_clock_freq_var_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
</UL>

<P><STRONG><a name="[106]"></a>bsp_prv_sosc_init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, bsp_clocks.o(.text.bsp_prv_sosc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_prv_sosc_init &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SubClockStabilizeWaitAfterReset
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
</UL>

<P><STRONG><a name="[107]"></a>bsp_prv_clock_set_hard_reset</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, bsp_clocks.o(.text.bsp_prv_clock_set_hard_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_prv_clock_set_hard_reset &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
</UL>

<P><STRONG><a name="[108]"></a>bsp_peripheral_clock_set</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, bsp_clocks.o(.text.bsp_peripheral_clock_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_peripheral_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
</UL>

<P><STRONG><a name="[7e]"></a>bsp_group_irq_call</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_group_irq.o(.text.bsp_group_irq_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_group_irq_call
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[82]"></a>r_adc_open_sub</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, r_adc.o(.text.r_adc_open_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = r_adc_open_sub &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_Open
</UL>

<P><STRONG><a name="[83]"></a>r_adc_irq_enable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, r_adc.o(.text.r_adc_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = r_adc_irq_enable &rArr; R_BSP_IrqCfgEnable &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_Open
</UL>

<P><STRONG><a name="[84]"></a>r_adc_scan_cfg</STRONG> (Thumb, 466 bytes, Stack size 64 bytes, r_adc.o(.text.r_adc_scan_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = r_adc_scan_cfg &rArr; r_adc_sensor_cfg &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_sensor_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_ScanCfg
</UL>

<P><STRONG><a name="[7f]"></a>r_adc_irq_disable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, r_adc.o(.text.r_adc_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = r_adc_irq_disable &rArr; R_FSP_IsrContextSet
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextSet
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_Close
</UL>

<P><STRONG><a name="[81]"></a>r_adc_lowest_channel_get</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, r_adc.o(.text.r_adc_lowest_channel_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = r_adc_lowest_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_InfoGet
</UL>

<P><STRONG><a name="[9a]"></a>R_BSP_IrqCfgEnable</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_adc.o(.text.R_BSP_IrqCfgEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = R_BSP_IrqCfgEnable &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_irq_enable
</UL>

<P><STRONG><a name="[14a]"></a>r_adc_sensor_cfg</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, r_adc.o(.text.r_adc_sensor_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = r_adc_sensor_cfg &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_sensor_sample_state_calculation
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_scan_cfg
</UL>

<P><STRONG><a name="[149]"></a>R_BSP_IrqDisable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, r_adc.o(.text.R_BSP_IrqDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_irq_disable
</UL>

<P><STRONG><a name="[91]"></a>R_FSP_IsrContextSet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, r_adc.o(.text.R_FSP_IsrContextSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_IsrContextSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_irq_disable
</UL>

<P><STRONG><a name="[d5]"></a>r_adc_scan_end_common_isr</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, r_adc.o(.text.r_adc_scan_end_common_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = r_adc_scan_end_common_isr &rArr; r_adc_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_call_callback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_scan_end_isr
</UL>

<P><STRONG><a name="[14b]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_adc.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_scan_end_common_isr
</UL>

<P><STRONG><a name="[14c]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_adc.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_scan_end_common_isr
</UL>

<P><STRONG><a name="[a0]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_adc.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_scan_end_common_isr
</UL>

<P><STRONG><a name="[14d]"></a>r_adc_call_callback</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, r_adc.o(.text.r_adc_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = r_adc_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_scan_end_common_isr
</UL>

<P><STRONG><a name="[14e]"></a>r_adc_sensor_sample_state_calculation</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, r_adc.o(.text.r_adc_sensor_sample_state_calculation))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = r_adc_sensor_sample_state_calculation &rArr; R_FSP_SystemClockHzGet
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_SystemClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_sensor_cfg
</UL>

<P><STRONG><a name="[14f]"></a>R_FSP_SystemClockHzGet</STRONG> (Thumb, 218 bytes, Stack size 28 bytes, r_adc.o(.text.R_FSP_SystemClockHzGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = R_FSP_SystemClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_sensor_sample_state_calculation
</UL>

<P><STRONG><a name="[8f]"></a>R_BSP_IrqCfg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_adc.o(.text.R_BSP_IrqCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_BSP_IrqCfg &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
</UL>

<P><STRONG><a name="[9b]"></a>R_BSP_IrqEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, r_adc.o(.text.R_BSP_IrqEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnableNoClear
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
</UL>

<P><STRONG><a name="[90]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, r_adc.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>

<P><STRONG><a name="[9f]"></a>R_BSP_IrqClearPending</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, r_adc.o(.text.R_BSP_IrqClearPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[a9]"></a>R_BSP_IrqEnableNoClear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, r_adc.o(.text.R_BSP_IrqEnableNoClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqEnableNoClear
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[89]"></a>r_agt_hardware_cfg</STRONG> (Thumb, 184 bytes, Stack size 52 bytes, r_agt.o(.text.r_agt_hardware_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = r_agt_hardware_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Open
</UL>

<P><STRONG><a name="[8a]"></a>r_agt_period_register_set</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, r_agt.o(.text.r_agt_period_register_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = r_agt_period_register_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_PeriodSet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Start
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Open
</UL>

<P><STRONG><a name="[8b]"></a>R_BSP_IrqCfgEnable</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_agt.o(.text.R_BSP_IrqCfgEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = R_BSP_IrqCfgEnable &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Open
</UL>

<P><STRONG><a name="[85]"></a>r_agt_common_preamble</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, r_agt.o(.text.r_agt_common_preamble))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = r_agt_common_preamble
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Close
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_StatusGet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_InfoGet
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_PeriodSet
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Reset
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Stop
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Start
</UL>

<P><STRONG><a name="[88]"></a>r_agt_clock_frequency_get</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, r_agt.o(.text.r_agt_clock_frequency_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = r_agt_clock_frequency_get &rArr; R_FSP_SystemClockHzGet
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_SystemClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_InfoGet
</UL>

<P><STRONG><a name="[86]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, r_agt.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Close
</UL>

<P><STRONG><a name="[87]"></a>R_FSP_IsrContextSet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, r_agt.o(.text.R_FSP_IsrContextSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_IsrContextSet
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Close
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>

<P><STRONG><a name="[92]"></a>R_BSP_IrqCfg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_agt.o(.text.R_BSP_IrqCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_BSP_IrqCfg &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
</UL>

<P><STRONG><a name="[9c]"></a>R_BSP_IrqEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, r_agt.o(.text.R_BSP_IrqEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnableNoClear
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
</UL>

<P><STRONG><a name="[150]"></a>R_FSP_SystemClockHzGet</STRONG> (Thumb, 218 bytes, Stack size 28 bytes, r_agt.o(.text.R_FSP_SystemClockHzGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = R_FSP_SystemClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_clock_frequency_get
</UL>

<P><STRONG><a name="[d7]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_agt.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agt_int_isr
</UL>

<P><STRONG><a name="[a2]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_agt.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agt_int_isr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>

<P><STRONG><a name="[d8]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_agt.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agt_int_isr
</UL>

<P><STRONG><a name="[93]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, r_agt.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>

<P><STRONG><a name="[a1]"></a>R_BSP_IrqClearPending</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, r_agt.o(.text.R_BSP_IrqClearPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[aa]"></a>R_BSP_IrqEnableNoClear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, r_agt.o(.text.R_BSP_IrqEnableNoClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqEnableNoClear
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[10c]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_ceu.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceu_isr
</UL>

<P><STRONG><a name="[10d]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_ceu.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceu_isr
</UL>

<P><STRONG><a name="[10e]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_ceu.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceu_isr
</UL>

<P><STRONG><a name="[10f]"></a>ceu_call_callback</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, r_ceu.o(.text.ceu_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ceu_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceu_isr
</UL>

<P><STRONG><a name="[b3]"></a>r_dtc_state_initialize</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, r_dtc.o(.text.r_dtc_state_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = r_dtc_state_initialize &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DTC_Open
</UL>

<P><STRONG><a name="[b4]"></a>r_dtc_set_info</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, r_dtc.o(.text.r_dtc_set_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = r_dtc_set_info &rArr; r_dtc_block_repeat_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_block_repeat_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DTC_Reconfigure
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DTC_Open
</UL>

<P><STRONG><a name="[b1]"></a>r_dtc_disable_transfer</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, r_dtc.o(.text.r_dtc_disable_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = r_dtc_disable_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DTC_Close
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DTC_Disable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DTC_Reset
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DTC_Reconfigure
</UL>

<P><STRONG><a name="[b5]"></a>r_dtc_wait_for_transfer_complete</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, r_dtc.o(.text.r_dtc_wait_for_transfer_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = r_dtc_wait_for_transfer_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DTC_Reset
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DTC_Reconfigure
</UL>

<P><STRONG><a name="[b2]"></a>r_dtc_prv_enable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, r_dtc.o(.text.r_dtc_prv_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = r_dtc_prv_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DTC_Enable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DTC_Reset
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_DTC_Reconfigure
</UL>

<P><STRONG><a name="[151]"></a>r_dtc_block_repeat_initialize</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, r_dtc.o(.text.r_dtc_block_repeat_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = r_dtc_block_repeat_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_dtc_set_info
</UL>

<P><STRONG><a name="[b9]"></a>r_ioport_pins_config</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, r_ioport.o(.text.r_ioport_pins_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = r_ioport_pins_config &rArr; bsp_vbatt_init &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_PinAccessDisable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pfs_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_PinAccessEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinsCfg
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_Open
</UL>

<P><STRONG><a name="[ba]"></a>bsp_vbatt_init</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, r_ioport.o(.text.bsp_vbatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_vbatt_init &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinCfg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>

<P><STRONG><a name="[bb]"></a>R_BSP_PinAccessEnable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, r_ioport.o(.text.R_BSP_PinAccessEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_BSP_PinAccessEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinCfg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>

<P><STRONG><a name="[bc]"></a>r_ioport_pfs_write</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, r_ioport.o(.text.r_ioport_pfs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = r_ioport_pfs_write
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinCfg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>

<P><STRONG><a name="[bd]"></a>R_BSP_PinAccessDisable</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, r_ioport.o(.text.R_BSP_PinAccessDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_BSP_PinAccessDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinCfg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>

<P><STRONG><a name="[be]"></a>r_ioport_hw_pin_event_output_data_write</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, r_ioport.o(.text.r_ioport_hw_pin_event_output_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = r_ioport_hw_pin_event_output_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinEventOutputWrite
</UL>

<P><STRONG><a name="[bf]"></a>R_BSP_PinRead</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_ioport.o(.text.R_BSP_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinRead
</UL>

<P><STRONG><a name="[c1]"></a>r_sci_b_spi_transfer_config</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, r_sci_b_spi.o(.text.r_sci_b_spi_transfer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_sci_b_spi_transfer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_SPI_Open
</UL>

<P><STRONG><a name="[c2]"></a>r_sci_b_spi_hw_config</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, r_sci_b_spi.o(.text.r_sci_b_spi_hw_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = r_sci_b_spi_hw_config &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_SPI_Open
</UL>

<P><STRONG><a name="[9d]"></a>R_BSP_IrqCfgEnable</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_sci_b_spi.o(.text.R_BSP_IrqCfgEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = R_BSP_IrqCfgEnable &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_SPI_Open
</UL>

<P><STRONG><a name="[c3]"></a>r_sci_b_spi_write_read_common</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, r_sci_b_spi.o(.text.r_sci_b_spi_write_read_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = r_sci_b_spi_write_read_common &rArr; r_sci_b_spi_start_transfer &rArr; R_BSP_IrqEnableNoClear
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_start_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_SPI_WriteRead
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_SPI_Write
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_SPI_Read
</UL>

<P><STRONG><a name="[c0]"></a>R_BSP_IrqDisable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, r_sci_b_spi.o(.text.R_BSP_IrqDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_SPI_Close
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_start_transfer
</UL>

<P><STRONG><a name="[94]"></a>R_BSP_IrqCfg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_sci_b_spi.o(.text.R_BSP_IrqCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_BSP_IrqCfg &rArr; R_FSP_IsrContextSet
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextSet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
</UL>

<P><STRONG><a name="[9e]"></a>R_BSP_IrqEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, r_sci_b_spi.o(.text.R_BSP_IrqEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnableNoClear
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
</UL>

<P><STRONG><a name="[154]"></a>r_sci_b_spi_start_transfer</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, r_sci_b_spi.o(.text.r_sci_b_spi_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = r_sci_b_spi_start_transfer &rArr; R_BSP_IrqEnableNoClear
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnableNoClear
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_transmit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_write_read_common
</UL>

<P><STRONG><a name="[15a]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_sci_b_spi.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_eri_isr
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_tei_isr
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_rxi_isr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_txi_isr
</UL>

<P><STRONG><a name="[a4]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_sci_b_spi.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_eri_isr
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_tei_isr
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_rxi_isr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_txi_isr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>

<P><STRONG><a name="[15b]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_sci_b_spi.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_eri_isr
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_tei_isr
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_rxi_isr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_txi_isr
</UL>

<P><STRONG><a name="[155]"></a>r_sci_b_spi_transmit</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, r_sci_b_spi.o(.text.r_sci_b_spi_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = r_sci_b_spi_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_rxi_isr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_txi_isr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_start_transfer
</UL>

<P><STRONG><a name="[15c]"></a>r_sci_b_spi_call_callback</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, r_sci_b_spi.o(.text.r_sci_b_spi_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_sci_b_spi_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_eri_isr
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_tei_isr
</UL>

<P><STRONG><a name="[95]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, r_sci_b_spi.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>

<P><STRONG><a name="[96]"></a>R_FSP_IsrContextSet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, r_sci_b_spi.o(.text.R_FSP_IsrContextSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_IsrContextSet
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>

<P><STRONG><a name="[a3]"></a>R_BSP_IrqClearPending</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, r_sci_b_spi.o(.text.R_BSP_IrqClearPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[ab]"></a>R_BSP_IrqEnableNoClear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, r_sci_b_spi.o(.text.R_BSP_IrqEnableNoClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqEnableNoClear
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_start_transfer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[c6]"></a>r_sci_b_irqs_cfg</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.r_sci_b_irqs_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = r_sci_b_irqs_cfg &rArr; r_sci_b_irq_cfg &rArr; R_BSP_IrqCfg &rArr; R_FSP_IsrContextSet
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_irq_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Open
</UL>

<P><STRONG><a name="[c7]"></a>r_sci_b_uart_config_set</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, r_sci_b_uart.o(.text.r_sci_b_uart_config_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_sci_b_uart_config_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Open
</UL>

<P><STRONG><a name="[ac]"></a>R_BSP_IrqEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.R_BSP_IrqEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnableNoClear
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Open
</UL>

<P><STRONG><a name="[c5]"></a>R_BSP_IrqDisable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_BSP_IrqDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Close
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_irq_cfg
</UL>

<P><STRONG><a name="[153]"></a>r_sci_b_irq_cfg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.r_sci_b_irq_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = r_sci_b_irq_cfg &rArr; R_BSP_IrqCfg &rArr; R_FSP_IsrContextSet
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_irqs_cfg
</UL>

<P><STRONG><a name="[a5]"></a>R_BSP_IrqClearPending</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.R_BSP_IrqClearPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[ad]"></a>R_BSP_IrqEnableNoClear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_BSP_IrqEnableNoClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqEnableNoClear
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[b6]"></a>R_FSP_SciClockHzGet</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, r_sci_b_uart.o(.text.R_FSP_SciClockHzGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_FSP_SciClockHzGet &rArr; R_FSP_ClockDividerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_ClockDividerGet
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SourceClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_BaudCalculate
</UL>

<P><STRONG><a name="[b7]"></a>R_FSP_ClockDividerGet</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_FSP_ClockDividerGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_ClockDividerGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_SciClockHzGet
</UL>

<P><STRONG><a name="[15d]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_eri_isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_tei_isr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_rxi_isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_txi_isr
</UL>

<P><STRONG><a name="[a6]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_sci_b_uart.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_eri_isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_tei_isr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_rxi_isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_txi_isr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_irq_cfg
</UL>

<P><STRONG><a name="[15e]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_sci_b_uart.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_eri_isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_tei_isr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_rxi_isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_txi_isr
</UL>

<P><STRONG><a name="[15f]"></a>r_sci_b_uart_call_callback</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, r_sci_b_uart.o(.text.r_sci_b_uart_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = r_sci_b_uart_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_eri_isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_tei_isr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_rxi_isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_txi_isr
</UL>

<P><STRONG><a name="[97]"></a>R_BSP_IrqCfg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_sci_b_uart.o(.text.R_BSP_IrqCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_BSP_IrqCfg &rArr; R_FSP_IsrContextSet
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_irq_cfg
</UL>

<P><STRONG><a name="[98]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>

<P><STRONG><a name="[99]"></a>R_FSP_IsrContextSet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_FSP_IsrContextSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_IsrContextSet
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>

<P><STRONG><a name="[157]"></a>r_sdhi_transfer_end</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, r_sdhi.o(.text.r_sdhi_transfer_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = r_sdhi_transfer_end
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_transfer_callback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_access_irq_process
</UL>

<P><STRONG><a name="[159]"></a>r_sdhi_call_callback</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, r_sdhi.o(.text.r_sdhi_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_sdhi_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_card_isr
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_accs_isr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_transfer_callback
</UL>

<P><STRONG><a name="[160]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_sdhi.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_dma_req_isr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_card_isr
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_accs_isr
</UL>

<P><STRONG><a name="[161]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_sdhi.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_dma_req_isr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_card_isr
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_accs_isr
</UL>

<P><STRONG><a name="[156]"></a>r_sdhi_access_irq_process</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, r_sdhi.o(.text.r_sdhi_access_irq_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = r_sdhi_access_irq_process &rArr; r_sdhi_transfer_end
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_transfer_end
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_accs_isr
</UL>

<P><STRONG><a name="[162]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_sdhi.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_dma_req_isr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_card_isr
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_accs_isr
</UL>

<P><STRONG><a name="[16c]"></a>R_BSP_IrqDisable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, r_spi_b.o(.text.R_BSP_IrqDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_eri_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_tei_isr
</UL>

<P><STRONG><a name="[16a]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_spi_b.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_eri_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_tei_isr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_txi_isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_rxi_isr
</UL>

<P><STRONG><a name="[a8]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_spi_b.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_eri_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_tei_isr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_txi_isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_rxi_isr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>

<P><STRONG><a name="[16b]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_spi_b.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_eri_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_tei_isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_rxi_isr
</UL>

<P><STRONG><a name="[16e]"></a>r_spi_b_receive</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, r_spi_b.o(.text.r_spi_b_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = r_spi_b_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_rxi_isr
</UL>

<P><STRONG><a name="[16f]"></a>r_spi_b_transmit</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, r_spi_b.o(.text.r_spi_b_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = r_spi_b_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_rxi_isr
</UL>

<P><STRONG><a name="[af]"></a>R_BSP_IrqEnableNoClear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, r_spi_b.o(.text.R_BSP_IrqEnableNoClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqEnableNoClear
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_rxi_isr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[ae]"></a>R_BSP_IrqEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, r_spi_b.o(.text.R_BSP_IrqEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnableNoClear
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_eri_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_tei_isr
</UL>

<P><STRONG><a name="[16d]"></a>r_spi_b_call_callback</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, r_spi_b.o(.text.r_spi_b_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_spi_b_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_eri_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_tei_isr
</UL>

<P><STRONG><a name="[a7]"></a>R_BSP_IrqClearPending</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, r_spi_b.o(.text.R_BSP_IrqClearPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[192]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18d]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[195]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[194]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[1f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
