<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\zf_ra_motherboard_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\zf_ra_motherboard_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Wed Jul  9 11:11:51 2025
<BR><P>
<H3>Maximum Stack Usage =       2584 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Reset_Handler &rArr; main &rArr; hal_entry &rArr; tcp_uart_process &rArr; parse_received_message &rArr; process_motor_command &rArr;  process_motor_command (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9c]">bsp_prv_software_delay_loop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9c]">bsp_prv_software_delay_loop</a><BR>
 <LI><a href="#[fa]">process_motor_command</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fa]">process_motor_command</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[1]">NMI_Handler</a> from bsp_group_irq.o(.text.NMI_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[9]">PendSV_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[3e]">R_AGT_CallbackSet</a> from r_agt.o(.text.R_AGT_CallbackSet) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[3f]">R_AGT_Close</a> from r_agt.o(.text.R_AGT_Close) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[3b]">R_AGT_CompareMatchSet</a> from r_agt.o(.text.R_AGT_CompareMatchSet) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[38]">R_AGT_Disable</a> from r_agt.o(.text.R_AGT_Disable) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[3a]">R_AGT_DutyCycleSet</a> from r_agt.o(.text.R_AGT_DutyCycleSet) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[37]">R_AGT_Enable</a> from r_agt.o(.text.R_AGT_Enable) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[3c]">R_AGT_InfoGet</a> from r_agt.o(.text.R_AGT_InfoGet) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[33]">R_AGT_Open</a> from r_agt.o(.text.R_AGT_Open) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[39]">R_AGT_PeriodSet</a> from r_agt.o(.text.R_AGT_PeriodSet) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[36]">R_AGT_Reset</a> from r_agt.o(.text.R_AGT_Reset) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[34]">R_AGT_Start</a> from r_agt.o(.text.R_AGT_Start) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[3d]">R_AGT_StatusGet</a> from r_agt.o(.text.R_AGT_StatusGet) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[35]">R_AGT_Stop</a> from r_agt.o(.text.R_AGT_Stop) referenced from r_agt.o(.rodata.g_timer_on_agt)
 <LI><a href="#[4b]">R_GPT_CallbackSet</a> from r_gpt.o(.text.R_GPT_CallbackSet) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[4c]">R_GPT_Close</a> from r_gpt.o(.text.R_GPT_Close) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[48]">R_GPT_CompareMatchSet</a> from r_gpt.o(.text.R_GPT_CompareMatchSet) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[45]">R_GPT_Disable</a> from r_gpt.o(.text.R_GPT_Disable) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[47]">R_GPT_DutyCycleSet</a> from r_gpt.o(.text.R_GPT_DutyCycleSet) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[44]">R_GPT_Enable</a> from r_gpt.o(.text.R_GPT_Enable) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[49]">R_GPT_InfoGet</a> from r_gpt.o(.text.R_GPT_InfoGet) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[40]">R_GPT_Open</a> from r_gpt.o(.text.R_GPT_Open) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[46]">R_GPT_PeriodSet</a> from r_gpt.o(.text.R_GPT_PeriodSet) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[43]">R_GPT_Reset</a> from r_gpt.o(.text.R_GPT_Reset) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[41]">R_GPT_Start</a> from r_gpt.o(.text.R_GPT_Start) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[4a]">R_GPT_StatusGet</a> from r_gpt.o(.text.R_GPT_StatusGet) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[42]">R_GPT_Stop</a> from r_gpt.o(.text.R_GPT_Stop) referenced from r_gpt.o(.rodata.g_timer_on_gpt)
 <LI><a href="#[25]">R_IOPORT_Close</a> from r_ioport.o(.text.R_IOPORT_Close) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[24]">R_IOPORT_Open</a> from r_ioport.o(.text.R_IOPORT_Open) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[27]">R_IOPORT_PinCfg</a> from r_ioport.o(.text.R_IOPORT_PinCfg) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[28]">R_IOPORT_PinEventInputRead</a> from r_ioport.o(.text.R_IOPORT_PinEventInputRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[29]">R_IOPORT_PinEventOutputWrite</a> from r_ioport.o(.text.R_IOPORT_PinEventOutputWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2a]">R_IOPORT_PinRead</a> from r_ioport.o(.text.R_IOPORT_PinRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2b]">R_IOPORT_PinWrite</a> from r_ioport.o(.text.R_IOPORT_PinWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[26]">R_IOPORT_PinsCfg</a> from r_ioport.o(.text.R_IOPORT_PinsCfg) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2c]">R_IOPORT_PortDirectionSet</a> from r_ioport.o(.text.R_IOPORT_PortDirectionSet) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2d]">R_IOPORT_PortEventInputRead</a> from r_ioport.o(.text.R_IOPORT_PortEventInputRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2e]">R_IOPORT_PortEventOutputWrite</a> from r_ioport.o(.text.R_IOPORT_PortEventOutputWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2f]">R_IOPORT_PortRead</a> from r_ioport.o(.text.R_IOPORT_PortRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[30]">R_IOPORT_PortWrite</a> from r_ioport.o(.text.R_IOPORT_PortWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[54]">R_SCI_B_UART_Abort</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Abort) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[52]">R_SCI_B_UART_BaudSet</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_BaudSet) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[55]">R_SCI_B_UART_CallbackSet</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_CallbackSet) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[56]">R_SCI_B_UART_Close</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Close) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[53]">R_SCI_B_UART_InfoGet</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_InfoGet) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[4f]">R_SCI_B_UART_Open</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Open) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[50]">R_SCI_B_UART_Read</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Read) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[57]">R_SCI_B_UART_ReadStop</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_ReadStop) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[51]">R_SCI_B_UART_Write</a> from r_sci_b_uart.o(.text.R_SCI_B_UART_Write) referenced from r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text.Reset_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[7]">SVC_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[a]">SysTick_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[1e]">_sbackspace</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[1f]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[1d]">_sgetc</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[22]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[23]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[13]">adc_scan_end_isr</a> from r_adc.o(.text.adc_scan_end_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[31]">agt0_callback</a> from hal_entry_1.o(.text.agt0_callback) referenced from hal_data.o(.rodata.g_timer0_cfg)
 <LI><a href="#[32]">agt1_callback</a> from zf_driver_pit.o(.text.agt1_callback) referenced from hal_data.o(.rodata.g_timer1_cfg)
 <LI><a href="#[19]">agt_int_isr</a> from r_agt.o(.text.agt_int_isr) referenced 2 times from vector_data.o(.application_vectors)
 <LI><a href="#[14]">ceu_isr</a> from r_ceu.o(.text.ceu_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[21]">fputc</a> from zf_common_debug.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[20]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[18]">sci_b_spi_eri_isr</a> from r_sci_b_spi.o(.text.sci_b_spi_eri_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[15]">sci_b_spi_rxi_isr</a> from r_sci_b_spi.o(.text.sci_b_spi_rxi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[17]">sci_b_spi_tei_isr</a> from r_sci_b_spi.o(.text.sci_b_spi_tei_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[16]">sci_b_spi_txi_isr</a> from r_sci_b_spi.o(.text.sci_b_spi_txi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[e]">sci_b_uart_eri_isr</a> from r_sci_b_uart.o(.text.sci_b_uart_eri_isr) referenced 3 times from vector_data.o(.application_vectors)
 <LI><a href="#[b]">sci_b_uart_rxi_isr</a> from r_sci_b_uart.o(.text.sci_b_uart_rxi_isr) referenced 3 times from vector_data.o(.application_vectors)
 <LI><a href="#[d]">sci_b_uart_tei_isr</a> from r_sci_b_uart.o(.text.sci_b_uart_tei_isr) referenced 3 times from vector_data.o(.application_vectors)
 <LI><a href="#[c]">sci_b_uart_txi_isr</a> from r_sci_b_uart.o(.text.sci_b_uart_txi_isr) referenced 3 times from vector_data.o(.application_vectors)
 <LI><a href="#[1a]">sdhimmc_accs_isr</a> from r_sdhi.o(.text.sdhimmc_accs_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[1b]">sdhimmc_card_isr</a> from r_sdhi.o(.text.sdhimmc_card_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[1c]">sdhimmc_dma_req_isr</a> from r_sdhi.o(.text.sdhimmc_dma_req_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[12]">spi_b_eri_isr</a> from r_spi_b.o(.text.spi_b_eri_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[f]">spi_b_rxi_isr</a> from r_spi_b.o(.text.spi_b_rxi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[11]">spi_b_tei_isr</a> from r_spi_b.o(.text.spi_b_tei_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[10]">spi_b_txi_isr</a> from r_spi_b.o(.text.spi_b_txi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[4d]">uart3_callback</a> from zf_driver_uart.o(.text.uart3_callback) referenced from hal_data.o(.rodata.g_uart3_cfg)
 <LI><a href="#[58]">uart4_callback</a> from zf_device_wifi_uart.o(.text.uart4_callback) referenced from hal_data.o(.rodata.wifi_uart4_cfg)
 <LI><a href="#[4e]">uart9_callback</a> from zf_common_debug.o(.text.uart9_callback) referenced from hal_data.o(.rodata.g_uart9_cfg)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_BaudCalculate
</UL>

<P><STRONG><a name="[f9]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_received_message
</UL>

<P><STRONG><a name="[d6]"></a>abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, siabs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_anchor_position
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_position
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_parse
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_tail_buffer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_rxi_isr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_transfer_callback
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_tail_buffer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_clear
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f6]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_received_message
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_process
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_init
</UL>

<P><STRONG><a name="[f7]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_received_message
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_get_new_message
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[f8]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_parse
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_received_message
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[eb]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_received_message
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_heartbeat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_send_message
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[fb]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_received_message
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[fc]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_received_message
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[138]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
</UL>

<P><STRONG><a name="[60]"></a>sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[158]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[159]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[64]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[76]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[75]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[69]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[61]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[1d]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[15b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[20]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[6c]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[70]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[15c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[15e]"></a>Default_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bsp_group_irq.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NMI_Handler &rArr; bsp_group_irq_call
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_group_irq_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[3e]"></a>R_AGT_CallbackSet</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, r_agt.o(.text.R_AGT_CallbackSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_AGT_CallbackSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[3f]"></a>R_AGT_Close</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, r_agt.o(.text.R_AGT_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = R_AGT_Close &rArr; r_agt_common_preamble
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextSet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[3b]"></a>R_AGT_CompareMatchSet</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, r_agt.o(.text.R_AGT_CompareMatchSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = R_AGT_CompareMatchSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[38]"></a>R_AGT_Disable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, r_agt.o(.text.R_AGT_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_AGT_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[3a]"></a>R_AGT_DutyCycleSet</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, r_agt.o(.text.R_AGT_DutyCycleSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = R_AGT_DutyCycleSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[37]"></a>R_AGT_Enable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, r_agt.o(.text.R_AGT_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_AGT_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[3c]"></a>R_AGT_InfoGet</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, r_agt.o(.text.R_AGT_InfoGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = R_AGT_InfoGet &rArr; r_agt_clock_frequency_get &rArr; R_FSP_SystemClockHzGet
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_clock_frequency_get
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[33]"></a>R_AGT_Open</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, r_agt.o(.text.R_AGT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = R_AGT_Open &rArr; R_BSP_IrqCfgEnable &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_period_register_set
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_hardware_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[39]"></a>R_AGT_PeriodSet</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, r_agt.o(.text.R_AGT_PeriodSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = R_AGT_PeriodSet &rArr; r_agt_period_register_set
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_period_register_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[36]"></a>R_AGT_Reset</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, r_agt.o(.text.R_AGT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_AGT_Reset &rArr; r_agt_common_preamble
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[34]"></a>R_AGT_Start</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, r_agt.o(.text.R_AGT_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = R_AGT_Start &rArr; r_agt_period_register_set
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_period_register_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[3d]"></a>R_AGT_StatusGet</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, r_agt.o(.text.R_AGT_StatusGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = R_AGT_StatusGet &rArr; r_agt_common_preamble
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[35]"></a>R_AGT_Stop</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, r_agt.o(.text.R_AGT_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = R_AGT_Stop &rArr; r_agt_common_preamble
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_common_preamble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_agt.o(.rodata.g_timer_on_agt)
</UL>
<P><STRONG><a name="[80]"></a>R_BSP_Init_RTC</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, bsp_clocks.o(.text.R_BSP_Init_RTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = R_BSP_Init_RTC &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[81]"></a>R_BSP_RegisterProtectDisable</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, bsp_register_protection.o(.text.R_BSP_RegisterProtectDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[82]"></a>R_BSP_RegisterProtectEnable</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, bsp_register_protection.o(.text.R_BSP_RegisterProtectEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_RegisterProtectEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7c]"></a>R_BSP_SoftwareDelay</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, bsp_delay.o(.text.R_BSP_SoftwareDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdram
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_us
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Close
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Open
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_hardware_initialize
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Open
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_clock_set_hard_reset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_sosc_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
</UL>

<P><STRONG><a name="[9f]"></a>R_BSP_SourceClockHzGet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_clocks.o(.text.R_BSP_SourceClockHzGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_SourceClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_SciClockHzGet
</UL>

<P><STRONG><a name="[c8]"></a>R_BSP_SubClockStabilizeWaitAfterReset</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_clocks.o(.text.R_BSP_SubClockStabilizeWaitAfterReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_SubClockStabilizeWaitAfterReset
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_sosc_init
</UL>

<P><STRONG><a name="[b5]"></a>R_BSP_WarmStart</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, system.o(.text.R_BSP_WarmStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_WarmStart
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4b]"></a>R_GPT_CallbackSet</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, r_gpt.o(.text.R_GPT_CallbackSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_GPT_CallbackSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[4c]"></a>R_GPT_Close</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, r_gpt.o(.text.R_GPT_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = R_GPT_Close &rArr; r_gpt_disable_irq &rArr; R_FSP_IsrContextSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_disable_irq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[48]"></a>R_GPT_CompareMatchSet</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, r_gpt.o(.text.R_GPT_CompareMatchSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_GPT_CompareMatchSet &rArr; r_gpt_write_protect_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[45]"></a>R_GPT_Disable</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, r_gpt.o(.text.R_GPT_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_GPT_Disable &rArr; r_gpt_write_protect_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_hardware_events_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[47]"></a>R_GPT_DutyCycleSet</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, r_gpt.o(.text.R_GPT_DutyCycleSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = R_GPT_DutyCycleSet &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_calculate_duty_cycle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[44]"></a>R_GPT_Enable</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, r_gpt.o(.text.R_GPT_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = R_GPT_Enable &rArr; r_gpt_write_protect_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[49]"></a>R_GPT_InfoGet</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, r_gpt.o(.text.R_GPT_InfoGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = R_GPT_InfoGet &rArr; gpt_clock_frequency_get &rArr; R_FSP_SystemClockHzGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_clock_frequency_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[40]"></a>R_GPT_Open</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, r_gpt.o(.text.R_GPT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = R_GPT_Open &rArr; gpt_hardware_initialize &rArr; r_gpt_enable_irq &rArr; R_BSP_IrqCfgEnable &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_hardware_initialize
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_common_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[46]"></a>R_GPT_PeriodSet</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, r_gpt.o(.text.R_GPT_PeriodSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_GPT_PeriodSet &rArr; r_gpt_write_protect_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[43]"></a>R_GPT_Reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, r_gpt.o(.text.R_GPT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_GPT_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[41]"></a>R_GPT_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, r_gpt.o(.text.R_GPT_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_GPT_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[4a]"></a>R_GPT_StatusGet</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, r_gpt.o(.text.R_GPT_StatusGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = R_GPT_StatusGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[42]"></a>R_GPT_Stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, r_gpt.o(.text.R_GPT_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_GPT_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_gpt.o(.rodata.g_timer_on_gpt)
</UL>
<P><STRONG><a name="[25]"></a>R_IOPORT_Close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, r_ioport.o(.text.R_IOPORT_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_IOPORT_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[24]"></a>R_IOPORT_Open</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_ioport.o(.text.R_IOPORT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = R_IOPORT_Open &rArr; r_ioport_pins_config &rArr; bsp_vbatt_init &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[27]"></a>R_IOPORT_PinCfg</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, r_ioport.o(.text.R_IOPORT_PinCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = R_IOPORT_PinCfg &rArr; bsp_vbatt_init &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_PinAccessDisable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pfs_write
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_PinAccessEnable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[28]"></a>R_IOPORT_PinEventInputRead</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, r_ioport.o(.text.R_IOPORT_PinEventInputRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_IOPORT_PinEventInputRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[29]"></a>R_IOPORT_PinEventOutputWrite</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, r_ioport.o(.text.R_IOPORT_PinEventOutputWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_IOPORT_PinEventOutputWrite &rArr; r_ioport_hw_pin_event_output_data_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_hw_pin_event_output_data_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2a]"></a>R_IOPORT_PinRead</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, r_ioport.o(.text.R_IOPORT_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2b]"></a>R_IOPORT_PinWrite</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, r_ioport.o(.text.R_IOPORT_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_IOPORT_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[26]"></a>R_IOPORT_PinsCfg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, r_ioport.o(.text.R_IOPORT_PinsCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = R_IOPORT_PinsCfg &rArr; r_ioport_pins_config &rArr; bsp_vbatt_init &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2c]"></a>R_IOPORT_PortDirectionSet</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, r_ioport.o(.text.R_IOPORT_PortDirectionSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_IOPORT_PortDirectionSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2d]"></a>R_IOPORT_PortEventInputRead</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, r_ioport.o(.text.R_IOPORT_PortEventInputRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_IOPORT_PortEventInputRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2e]"></a>R_IOPORT_PortEventOutputWrite</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, r_ioport.o(.text.R_IOPORT_PortEventOutputWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_IOPORT_PortEventOutputWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2f]"></a>R_IOPORT_PortRead</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, r_ioport.o(.text.R_IOPORT_PortRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_IOPORT_PortRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[30]"></a>R_IOPORT_PortWrite</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, r_ioport.o(.text.R_IOPORT_PortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_IOPORT_PortWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[54]"></a>R_SCI_B_UART_Abort</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_SCI_B_UART_Abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[af]"></a>R_SCI_B_UART_BaudCalculate</STRONG> (Thumb, 576 bytes, Stack size 80 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_BaudCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = R_SCI_B_UART_BaudCalculate &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_SciClockHzGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[52]"></a>R_SCI_B_UART_BaudSet</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_BaudSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_SCI_B_UART_BaudSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[55]"></a>R_SCI_B_UART_CallbackSet</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_CallbackSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_SCI_B_UART_CallbackSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[56]"></a>R_SCI_B_UART_Close</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = R_SCI_B_UART_Close &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[53]"></a>R_SCI_B_UART_InfoGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_InfoGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_SCI_B_UART_InfoGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[4f]"></a>R_SCI_B_UART_Open</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = R_SCI_B_UART_Open &rArr; r_sci_b_irqs_cfg &rArr; r_sci_b_irq_cfg &rArr; R_BSP_IrqCfg &rArr; R_FSP_IsrContextSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_config_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_irqs_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[50]"></a>R_SCI_B_UART_Read</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_SCI_B_UART_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[57]"></a>R_SCI_B_UART_ReadStop</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_ReadStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = R_SCI_B_UART_ReadStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[51]"></a>R_SCI_B_UART_Write</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.R_SCI_B_UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_SCI_B_UART_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_b_uart.o(.rodata.g_uart_on_sci_b)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, startup.o(.text.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2584<LI>Call Chain = Reset_Handler &rArr; main &rArr; hal_entry &rArr; tcp_uart_process &rArr; parse_received_message &rArr; process_motor_command &rArr;  process_motor_command (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[bb]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, bsp_clocks.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_clock_set_hard_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_freq_var_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b3]"></a>SystemInit</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, system.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemInit &rArr; bsp_clock_init &rArr; bsp_prv_clock_set_hard_reset &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_irq_cfg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_WarmStart
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_dtcm
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_itcm
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[13]"></a>adc_scan_end_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, r_adc.o(.text.adc_scan_end_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = adc_scan_end_isr &rArr; r_adc_scan_end_common_isr &rArr; r_adc_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_scan_end_common_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[31]"></a>agt0_callback</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hal_entry_1.o(.text.agt0_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = agt0_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_timer0_cfg)
</UL>
<P><STRONG><a name="[32]"></a>agt1_callback</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, zf_driver_pit.o(.text.agt1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = agt1_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_timer1_cfg)
</UL>
<P><STRONG><a name="[19]"></a>agt_int_isr</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, r_agt.o(.text.agt_int_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = agt_int_isr &rArr; R_FSP_CurrentIrqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[b6]"></a>bsp_clock_init</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, bsp_clocks.o(.text.bsp_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_clock_init &rArr; bsp_prv_clock_set_hard_reset &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_peripheral_clock_set
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_clock_set_hard_reset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_sosc_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_freq_var_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_FlashCacheEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[bd]"></a>bsp_init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_common.o(.text.bsp_init_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[15f]"></a>bsp_init_internal</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_common.o(.text.bsp_init_internal), UNUSED)

<P><STRONG><a name="[bc]"></a>bsp_irq_cfg</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, bsp_irq.o(.text.bsp_irq_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsp_irq_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9c]"></a>bsp_prv_software_delay_loop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_delay.o(.text.bsp_prv_software_delay_loop))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
</UL>

<P><STRONG><a name="[14]"></a>ceu_isr</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, r_ceu.o(.text.ceu_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ceu_isr &rArr; ceu_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceu_call_callback
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[e0]"></a>debug_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zf_common_debug.o(.text.debug_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart9_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[cd]"></a>fifo_clear</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, zf_common_fifo.o(.text.fifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>

<P><STRONG><a name="[139]"></a>fifo_init</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, zf_common_fifo.o(.text.fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[ce]"></a>fifo_read_buffer</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, zf_common_fifo.o(.text.fifo_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fifo_read_buffer &rArr; fifo_end_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_used
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_end_offset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_mac
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_ip
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_read_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
</UL>

<P><STRONG><a name="[d2]"></a>fifo_read_tail_buffer</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, zf_common_fifo.o(.text.fifo_read_tail_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fifo_read_tail_buffer &rArr; fifo_end_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_used
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_end_offset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
</UL>

<P><STRONG><a name="[cf]"></a>fifo_used</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, zf_common_fifo.o(.text.fifo_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fifo_used
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_tail_buffer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
</UL>

<P><STRONG><a name="[d3]"></a>fifo_write_buffer</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, zf_common_fifo.o(.text.fifo_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fifo_write_buffer &rArr; fifo_head_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_head_offset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_callback
</UL>

<P><STRONG><a name="[d5]"></a>filter_anchor_position</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, hal_entry_1.o(.text.filter_anchor_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = filter_anchor_position
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uwb_frame
</UL>

<P><STRONG><a name="[d7]"></a>filter_position</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, hal_entry_1.o(.text.filter_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = filter_position
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uwb_frame
</UL>

<P><STRONG><a name="[21]"></a>fputc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, zf_common_debug.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[13b]"></a>func_int_to_str</STRONG> (Thumb, 218 bytes, Stack size 36 bytes, zf_common_function.o(.text.func_int_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = func_int_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[e8]"></a>get_system_time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_entry_1.o(.text.get_system_time))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uwb_frame
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_run_time
</UL>

<P><STRONG><a name="[112]"></a>get_system_time_ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp_uart_1.o(.text.get_system_time_ms))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_heartbeat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_position_to_cloud
</UL>

<P><STRONG><a name="[d8]"></a>gpio_get_level</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, zf_driver_gpio.o(.text.gpio_get_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gpio_get_level &rArr; R_IOPORT_PinRead &rArr; R_BSP_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[d9]"></a>gpio_set_level</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, zf_driver_gpio.o(.text.gpio_set_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_set_level &rArr; R_IOPORT_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_right
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_left
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_direction
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_cr_vfcc_init
</UL>

<P><STRONG><a name="[de]"></a>hal_entry</STRONG> (Thumb, 2142 bytes, Stack size 104 bytes, hal_entry_1.o(.text.hal_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 2560<LI>Call Chain = hal_entry &rArr; tcp_uart_process &rArr; parse_received_message &rArr; process_motor_command &rArr;  process_motor_command (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_get_new_message
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_process
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart9_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pit_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdram
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uwb_frame
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_send_message
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_cr_vfcc_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>init_sdram</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, ra_driver_sdram.o(.text.init_sdram))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_sdram &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[b4]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2576<LI>Call Chain = main &rArr; hal_entry &rArr; tcp_uart_process &rArr; parse_received_message &rArr; process_motor_command &rArr;  process_motor_command (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[ee]"></a>motor_execute</STRONG> (Thumb, 912 bytes, Stack size 64 bytes, hal_entry_1.o(.text.motor_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = motor_execute &rArr; motor_run_time &rArr; pwm_set_duty &rArr; R_GPT_DutyCycleSet &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_run_time
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_direction
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward_steps
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_right
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_left
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[f0]"></a>motor_run_time</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, hal_entry_1.o(.text.motor_run_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = motor_run_time &rArr; pwm_set_duty &rArr; R_GPT_DutyCycleSet &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_us
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_execute
</UL>

<P><STRONG><a name="[f3]"></a>move_forward</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, hal_entry_1.o(.text.move_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = move_forward &rArr; motor_execute &rArr; motor_run_time &rArr; pwm_set_duty &rArr; R_GPT_DutyCycleSet &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_execute
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[f4]"></a>move_forward_steps</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, hal_entry_1.o(.text.move_forward_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = move_forward_steps &rArr; motor_execute &rArr; motor_run_time &rArr; pwm_set_duty &rArr; R_GPT_DutyCycleSet &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_execute
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[ed]"></a>parse_uwb_frame</STRONG> (Thumb, 1952 bytes, Stack size 424 bytes, hal_entry_1.o(.text.parse_uwb_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = parse_uwb_frame &rArr; tcp_uart_send_message &rArr; wifi_uart_send_buffer &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_anchor_position
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_position
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_int16_big_endian
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uint32_big_endian
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_send_message
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[e3]"></a>pit_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, zf_driver_pit.o(.text.pit_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[fa]"></a>process_motor_command</STRONG> (Thumb, 1792 bytes, Stack size 544 bytes, hal_entry_1.o(.text.process_motor_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240 + In Cycle
<LI>Call Chain = process_motor_command &rArr;  process_motor_command (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_send_message
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_position_to_cloud
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward_steps
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_back
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_right
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_left
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_angle_correction
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_execute
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_received_message
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[124]"></a>pwm_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, zf_driver_pwm.o(.text.pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_cr_vfcc_init
</UL>

<P><STRONG><a name="[f1]"></a>pwm_set_duty</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, zf_driver_pwm.o(.text.pwm_set_duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = pwm_set_duty &rArr; R_GPT_DutyCycleSet &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_DutyCycleSet
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_InfoGet
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_run_time
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_cr_vfcc_init
</UL>

<P><STRONG><a name="[110]"></a>r_sdhi_transfer_callback</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, r_sdhi.o(.text.r_sdhi_transfer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = r_sdhi_transfer_callback &rArr; r_sdhi_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_call_callback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_transfer_end
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_dma_req_isr
</UL>

<P><STRONG><a name="[fe]"></a>read_int16_big_endian</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, hal_entry_1.o(.text.read_int16_big_endian))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = read_int16_big_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uwb_frame
</UL>

<P><STRONG><a name="[fd]"></a>read_uint32_big_endian</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_entry_1.o(.text.read_uint32_big_endian))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = read_uint32_big_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uwb_frame
</UL>

<P><STRONG><a name="[105]"></a>report_position_to_cloud</STRONG> (Thumb, 486 bytes, Stack size 464 bytes, hal_entry_1.o(.text.report_position_to_cloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = report_position_to_cloud &rArr; tcp_uart_send_message &rArr; wifi_uart_send_buffer &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_ms
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_send_message
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_process
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[18]"></a>sci_b_spi_eri_isr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, r_sci_b_spi.o(.text.sci_b_spi_eri_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sci_b_spi_eri_isr &rArr; r_sci_b_spi_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_call_callback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[15]"></a>sci_b_spi_rxi_isr</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, r_sci_b_spi.o(.text.sci_b_spi_rxi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sci_b_spi_rxi_isr &rArr; R_FSP_CurrentIrqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_transmit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[17]"></a>sci_b_spi_tei_isr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, r_sci_b_spi.o(.text.sci_b_spi_tei_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sci_b_spi_tei_isr &rArr; r_sci_b_spi_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_call_callback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[16]"></a>sci_b_spi_txi_isr</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, r_sci_b_spi.o(.text.sci_b_spi_txi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sci_b_spi_txi_isr &rArr; R_FSP_CurrentIrqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_spi_transmit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[e]"></a>sci_b_uart_eri_isr</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, r_sci_b_uart.o(.text.sci_b_uart_eri_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sci_b_uart_eri_isr &rArr; r_sci_b_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_call_callback
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[b]"></a>sci_b_uart_rxi_isr</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, r_sci_b_uart.o(.text.sci_b_uart_rxi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sci_b_uart_rxi_isr &rArr; r_sci_b_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_call_callback
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[d]"></a>sci_b_uart_tei_isr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.sci_b_uart_tei_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sci_b_uart_tei_isr &rArr; r_sci_b_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_call_callback
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[c]"></a>sci_b_uart_txi_isr</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, r_sci_b_uart.o(.text.sci_b_uart_txi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sci_b_uart_txi_isr &rArr; r_sci_b_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_uart_call_callback
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[1a]"></a>sdhimmc_accs_isr</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, r_sdhi.o(.text.sdhimmc_accs_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sdhimmc_accs_isr &rArr; r_sdhi_access_irq_process &rArr; r_sdhi_transfer_end
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_access_irq_process
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[1b]"></a>sdhimmc_card_isr</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, r_sdhi.o(.text.sdhimmc_card_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sdhimmc_card_isr &rArr; r_sdhi_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[1c]"></a>sdhimmc_dma_req_isr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, r_sdhi.o(.text.sdhimmc_dma_req_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sdhimmc_dma_req_isr &rArr; r_sdhi_transfer_callback &rArr; r_sdhi_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_transfer_callback
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[106]"></a>set_angle_correction</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, hal_entry_1.o(.text.set_angle_correction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = set_angle_correction &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[ef]"></a>set_motor_direction</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, hal_entry_1.o(.text.set_motor_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_motor_direction &rArr; gpio_set_level &rArr; R_IOPORT_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_execute
</UL>

<P><STRONG><a name="[12]"></a>spi_b_eri_isr</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, r_spi_b.o(.text.spi_b_eri_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = spi_b_eri_isr &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_spi_b_call_callback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[f]"></a>spi_b_rxi_isr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, r_spi_b.o(.text.spi_b_rxi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_b_rxi_isr &rArr; R_BSP_IrqEnableNoClear
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnableNoClear
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_spi_b_transmit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_spi_b_receive
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[11]"></a>spi_b_tei_isr</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, r_spi_b.o(.text.spi_b_tei_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi_b_tei_isr &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_spi_b_call_callback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[10]"></a>spi_b_txi_isr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, r_spi_b.o(.text.spi_b_txi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_b_txi_isr &rArr; R_FSP_CurrentIrqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[e4]"></a>stepper_cr_vfcc_init</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, hal_entry_1.o(.text.stepper_cr_vfcc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = stepper_cr_vfcc_init &rArr; pwm_set_duty &rArr; R_GPT_DutyCycleSet &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set_duty
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[e1]"></a>system_delay_ms</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, zf_driver_delay.o(.text.system_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_reset
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_back
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_execute
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_cr_vfcc_init
</UL>

<P><STRONG><a name="[f2]"></a>system_delay_us</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, zf_driver_delay.o(.text.system_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = system_delay_us &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_run_time
</UL>

<P><STRONG><a name="[ea]"></a>tcp_uart_get_new_message</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp_uart_1.o(.text.tcp_uart_get_new_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_uart_get_new_message &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[e5]"></a>tcp_uart_init</STRONG> (Thumb, 772 bytes, Stack size 168 bytes, tcp_uart_1.o(.text.tcp_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tcp_uart_init &rArr; wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_read_buffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_ms
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[e9]"></a>tcp_uart_process</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tcp_uart_1.o(.text.tcp_uart_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456<LI>Call Chain = tcp_uart_process &rArr; parse_received_message &rArr; process_motor_command &rArr;  process_motor_command (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_read_buffer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_received_message
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_heartbeat
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_position_to_cloud
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[ec]"></a>tcp_uart_send_message</STRONG> (Thumb, 184 bytes, Stack size 1056 bytes, tcp_uart_1.o(.text.tcp_uart_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = tcp_uart_send_message &rArr; wifi_uart_send_buffer &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uwb_frame
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_position_to_cloud
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[104]"></a>turn_back</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hal_entry_1.o(.text.turn_back))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = turn_back &rArr; turn_left &rArr; motor_execute &rArr; motor_run_time &rArr; pwm_set_duty &rArr; R_GPT_DutyCycleSet &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_left
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[102]"></a>turn_left</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, hal_entry_1.o(.text.turn_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = turn_left &rArr; motor_execute &rArr; motor_run_time &rArr; pwm_set_duty &rArr; R_GPT_DutyCycleSet &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_execute
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_back
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[103]"></a>turn_right</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, hal_entry_1.o(.text.turn_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = turn_right &rArr; motor_execute &rArr; motor_run_time &rArr; pwm_set_duty &rArr; R_GPT_DutyCycleSet &rArr; gpt_calculate_duty_cycle
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_execute
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_level
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[4d]"></a>uart3_callback</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, zf_driver_uart.o(.text.uart3_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart3_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_uart3_cfg)
</UL>
<P><STRONG><a name="[e6]"></a>uart3_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, zf_driver_uart.o(.text.uart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart3_init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[58]"></a>uart4_callback</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, zf_device_wifi_uart.o(.text.uart4_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart4_callback &rArr; fifo_write_buffer &rArr; fifo_head_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.wifi_uart4_cfg)
</UL>
<P><STRONG><a name="[4e]"></a>uart9_callback</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, zf_common_debug.o(.text.uart9_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart9_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_uart9_cfg)
</UL>
<P><STRONG><a name="[e7]"></a>uart9_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, zf_driver_uart.o(.text.uart9_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart9_init &rArr; debug_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[128]"></a>wifi_uart_connect_tcp_servers</STRONG> (Thumb, 442 bytes, Stack size 168 bytes, zf_device_wifi_uart.o(.text.wifi_uart_connect_tcp_servers))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wifi_uart_connect_tcp_servers &rArr; wifi_uart_set_transfer_model &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_entry_serianet
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_transfer_model
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_connect_model
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_init
</UL>

<P><STRONG><a name="[132]"></a>wifi_uart_entry_serianet</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, zf_device_wifi_uart.o(.text.wifi_uart_entry_serianet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wifi_uart_entry_serianet &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
</UL>

<P><STRONG><a name="[127]"></a>wifi_uart_init</STRONG> (Thumb, 376 bytes, Stack size 80 bytes, zf_device_wifi_uart.o(.text.wifi_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = wifi_uart_init &rArr; wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_BaudCalculate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_model
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_reset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_information
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_wifi
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_auto_connect_wifi
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_echo_set
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_uart_config_set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_int_to_str
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_init
</UL>

<P><STRONG><a name="[12a]"></a>wifi_uart_read_buffer</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, zf_device_wifi_uart.o(.text.wifi_uart_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wifi_uart_read_buffer &rArr; fifo_read_buffer &rArr; fifo_end_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_process
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_init
</UL>

<P><STRONG><a name="[13a]"></a>wifi_uart_reset</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, zf_device_wifi_uart.o(.text.wifi_uart_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wifi_uart_reset &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinWrite
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[126]"></a>wifi_uart_send_buffer</STRONG> (Thumb, 382 bytes, Stack size 64 bytes, zf_device_wifi_uart.o(.text.wifi_uart_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wifi_uart_send_buffer &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_buffer
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_byte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_int_to_str
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_level
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_heartbeat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_send_message
</UL>

<P><STRONG><a name="[13d]"></a>wifi_uart_set_model</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, zf_device_wifi_uart.o(.text.wifi_uart_set_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wifi_uart_set_model &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[141]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[160]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[161]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[162]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e2]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_received_message
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_heartbeat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_process
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uwb_frame
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_send_message
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_position_to_cloud
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward_steps
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_forward
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_back
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_right
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_left
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_angle_correction
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_execute
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_run_time
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_cr_vfcc_init
</UL>

<P><STRONG><a name="[143]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[163]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[164]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[165]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[101]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uwb_frame
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_send_message
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_position_to_cloud
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
</UL>

<P><STRONG><a name="[144]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[166]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[167]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[168]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[129]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_init
</UL>

<P><STRONG><a name="[14c]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[ff]"></a>__hardfp_cos</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uwb_frame
</UL>

<P><STRONG><a name="[100]"></a>__hardfp_sin</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_uwb_frame
</UL>

<P><STRONG><a name="[147]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 646 bytes, Stack size 144 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[149]"></a>__kernel_cos</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __kernel_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[14b]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[148]"></a>__kernel_sin</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __kernel_sin &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[146]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[14d]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[145]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[6a]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[14a]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[125]"></a>tcp_send_heartbeat</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tcp_uart_1.o(.text.tcp_send_heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_send_heartbeat &rArr; wifi_uart_send_buffer &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_ms
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_process
</UL>

<P><STRONG><a name="[f5]"></a>parse_received_message</STRONG> (Thumb, 694 bytes, Stack size 200 bytes, tcp_uart_1.o(.text.parse_received_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440<LI>Call Chain = parse_received_message &rArr; process_motor_command &rArr;  process_motor_command (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_motor_command
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_uart_process
</UL>

<P><STRONG><a name="[d4]"></a>fifo_head_offset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, zf_common_fifo.o(.text.fifo_head_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_head_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buffer
</UL>

<P><STRONG><a name="[d1]"></a>fifo_end_offset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, zf_common_fifo.o(.text.fifo_end_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_end_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_tail_buffer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
</UL>

<P><STRONG><a name="[12e]"></a>wifi_uart_clear_receive_buffer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, zf_device_wifi_uart.o(.text.wifi_uart_clear_receive_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_uart_clear_receive_buffer &rArr; fifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_entry_serianet
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_model
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_reset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_mac
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_ip
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_wifi
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_auto_connect_wifi
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_echo_set
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_uart_config_set
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_transfer_model
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_connect_model
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[12b]"></a>uart_write_string</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, zf_device_wifi_uart.o(.text.uart_write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_write_string
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_entry_serianet
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_model
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_mac
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_ip
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_wifi
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_auto_connect_wifi
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_echo_set
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_uart_config_set
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_transfer_model
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_connect_model
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
</UL>

<P><STRONG><a name="[12f]"></a>wifi_uart_wait_ack</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, zf_device_wifi_uart.o(.text.wifi_uart_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_tail_buffer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_delay_ms
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_entry_serianet
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_model
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_reset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_mac
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_ip
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_wifi
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_auto_connect_wifi
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_echo_set
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_uart_config_set
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_transfer_model
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_set_connect_model
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
</UL>

<P><STRONG><a name="[130]"></a>wifi_uart_set_connect_model</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, zf_device_wifi_uart.o(.text.wifi_uart_set_connect_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wifi_uart_set_connect_model &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
</UL>

<P><STRONG><a name="[131]"></a>wifi_uart_set_transfer_model</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, zf_device_wifi_uart.o(.text.wifi_uart_set_transfer_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wifi_uart_set_transfer_model &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_connect_tcp_servers
</UL>

<P><STRONG><a name="[140]"></a>uart_write_byte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, zf_device_wifi_uart.o(.text.uart_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
</UL>

<P><STRONG><a name="[13f]"></a>uart_write_buffer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, zf_device_wifi_uart.o(.text.uart_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_write_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_send_buffer
</UL>

<P><STRONG><a name="[13c]"></a>wifi_uart_uart_config_set</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, zf_device_wifi_uart.o(.text.wifi_uart_uart_config_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wifi_uart_uart_config_set &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[133]"></a>wifi_uart_echo_set</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, zf_device_wifi_uart.o(.text.wifi_uart_echo_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wifi_uart_echo_set &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[12d]"></a>wifi_uart_auto_connect_wifi</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, zf_device_wifi_uart.o(.text.wifi_uart_auto_connect_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wifi_uart_auto_connect_wifi &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[13e]"></a>wifi_uart_set_wifi</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, zf_device_wifi_uart.o(.text.wifi_uart_set_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wifi_uart_set_wifi &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[134]"></a>wifi_uart_get_information</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, zf_device_wifi_uart.o(.text.wifi_uart_get_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = wifi_uart_get_information &rArr; wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_mac
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_ip
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_init
</UL>

<P><STRONG><a name="[135]"></a>wifi_uart_get_version</STRONG> (Thumb, 150 bytes, Stack size 288 bytes, zf_device_wifi_uart.o(.text.wifi_uart_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = wifi_uart_get_version &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_parse
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_information
</UL>

<P><STRONG><a name="[136]"></a>wifi_uart_get_ip</STRONG> (Thumb, 196 bytes, Stack size 152 bytes, zf_device_wifi_uart.o(.text.wifi_uart_get_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wifi_uart_get_ip &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_parse
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_information
</UL>

<P><STRONG><a name="[137]"></a>wifi_uart_get_mac</STRONG> (Thumb, 136 bytes, Stack size 88 bytes, zf_device_wifi_uart.o(.text.wifi_uart_get_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wifi_uart_get_mac &rArr; wifi_uart_wait_ack &rArr; system_delay_ms &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_data_parse
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_wait_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_clear_receive_buffer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_information
</UL>

<P><STRONG><a name="[12c]"></a>wifi_data_parse</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, zf_device_wifi_uart.o(.text.wifi_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_data_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_mac
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_ip
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_get_version
</UL>

<P><STRONG><a name="[b9]"></a>bsp_init_itcm</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, system.o(.text.bsp_init_itcm))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_init_itcm &rArr; memcpy_64
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_64
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ba]"></a>bsp_init_dtcm</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, system.o(.text.bsp_init_dtcm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_init_dtcm &rArr; memcpy_64
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset_64
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy_64
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c6]"></a>memcpy_64</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, system.o(.text.memcpy_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memcpy_64
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_dtcm
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_itcm
</UL>

<P><STRONG><a name="[c7]"></a>memset_64</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, system.o(.text.memset_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memset_64
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_dtcm
</UL>

<P><STRONG><a name="[c2]"></a>R_BSP_FlashCacheEnable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_clocks.o(.text.R_BSP_FlashCacheEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
</UL>

<P><STRONG><a name="[c1]"></a>bsp_clock_freq_var_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp_clocks.o(.text.bsp_clock_freq_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_clock_freq_var_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
</UL>

<P><STRONG><a name="[c3]"></a>bsp_prv_sosc_init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, bsp_clocks.o(.text.bsp_prv_sosc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_prv_sosc_init &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SubClockStabilizeWaitAfterReset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
</UL>

<P><STRONG><a name="[c4]"></a>bsp_prv_clock_set_hard_reset</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, bsp_clocks.o(.text.bsp_prv_clock_set_hard_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_prv_clock_set_hard_reset &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
</UL>

<P><STRONG><a name="[c5]"></a>bsp_peripheral_clock_set</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, bsp_clocks.o(.text.bsp_peripheral_clock_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_peripheral_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
</UL>

<P><STRONG><a name="[77]"></a>bsp_group_irq_call</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_group_irq.o(.text.bsp_group_irq_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_group_irq_call
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[be]"></a>r_adc_scan_end_common_isr</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, r_adc.o(.text.r_adc_scan_end_common_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = r_adc_scan_end_common_isr &rArr; r_adc_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_call_callback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextGet
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_scan_end_isr
</UL>

<P><STRONG><a name="[107]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_adc.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_scan_end_common_isr
</UL>

<P><STRONG><a name="[108]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_adc.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_scan_end_common_isr
</UL>

<P><STRONG><a name="[109]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_adc.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_scan_end_common_isr
</UL>

<P><STRONG><a name="[10a]"></a>r_adc_call_callback</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, r_adc.o(.text.r_adc_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = r_adc_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_scan_end_common_isr
</UL>

<P><STRONG><a name="[7d]"></a>r_agt_hardware_cfg</STRONG> (Thumb, 184 bytes, Stack size 52 bytes, r_agt.o(.text.r_agt_hardware_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = r_agt_hardware_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Open
</UL>

<P><STRONG><a name="[7e]"></a>r_agt_period_register_set</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, r_agt.o(.text.r_agt_period_register_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = r_agt_period_register_set
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_PeriodSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Start
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Open
</UL>

<P><STRONG><a name="[7f]"></a>R_BSP_IrqCfgEnable</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_agt.o(.text.R_BSP_IrqCfgEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = R_BSP_IrqCfgEnable &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Open
</UL>

<P><STRONG><a name="[78]"></a>r_agt_common_preamble</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, r_agt.o(.text.r_agt_common_preamble))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = r_agt_common_preamble
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Close
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_StatusGet
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_InfoGet
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_PeriodSet
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Reset
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Stop
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Start
</UL>

<P><STRONG><a name="[7b]"></a>r_agt_clock_frequency_get</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, r_agt.o(.text.r_agt_clock_frequency_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = r_agt_clock_frequency_get &rArr; R_FSP_SystemClockHzGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_SystemClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_InfoGet
</UL>

<P><STRONG><a name="[79]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, r_agt.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Close
</UL>

<P><STRONG><a name="[7a]"></a>R_FSP_IsrContextSet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, r_agt.o(.text.R_FSP_IsrContextSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_IsrContextSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_AGT_Close
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>

<P><STRONG><a name="[83]"></a>R_BSP_IrqCfg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_agt.o(.text.R_BSP_IrqCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_BSP_IrqCfg &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
</UL>

<P><STRONG><a name="[8b]"></a>R_BSP_IrqEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, r_agt.o(.text.R_BSP_IrqEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnableNoClear
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
</UL>

<P><STRONG><a name="[10b]"></a>R_FSP_SystemClockHzGet</STRONG> (Thumb, 218 bytes, Stack size 28 bytes, r_agt.o(.text.R_FSP_SystemClockHzGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = R_FSP_SystemClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_agt_clock_frequency_get
</UL>

<P><STRONG><a name="[bf]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_agt.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agt_int_isr
</UL>

<P><STRONG><a name="[8f]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_agt.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agt_int_isr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>

<P><STRONG><a name="[c0]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_agt.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agt_int_isr
</UL>

<P><STRONG><a name="[84]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, r_agt.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>

<P><STRONG><a name="[8e]"></a>R_BSP_IrqClearPending</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, r_agt.o(.text.R_BSP_IrqClearPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[96]"></a>R_BSP_IrqEnableNoClear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, r_agt.o(.text.R_BSP_IrqEnableNoClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqEnableNoClear
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[c9]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_ceu.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceu_isr
</UL>

<P><STRONG><a name="[ca]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_ceu.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceu_isr
</UL>

<P><STRONG><a name="[cb]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_ceu.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceu_isr
</UL>

<P><STRONG><a name="[cc]"></a>ceu_call_callback</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, r_ceu.o(.text.ceu_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ceu_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceu_isr
</UL>

<P><STRONG><a name="[a6]"></a>gpt_common_open</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, r_gpt.o(.text.gpt_common_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpt_common_open
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Open
</UL>

<P><STRONG><a name="[a7]"></a>gpt_hardware_initialize</STRONG> (Thumb, 634 bytes, Stack size 88 bytes, r_gpt.o(.text.gpt_hardware_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = gpt_hardware_initialize &rArr; r_gpt_enable_irq &rArr; R_BSP_IrqCfgEnable &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_enable_irq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_init_compare_match_channel
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_gtior_calculate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_calculate_duty_cycle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_hardware_events_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_write_protect_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Open
</UL>

<P><STRONG><a name="[a1]"></a>r_gpt_write_protect_disable</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, r_gpt.o(.text.r_gpt_write_protect_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = r_gpt_write_protect_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_DutyCycleSet
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Close
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_CompareMatchSet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_PeriodSet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Disable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Enable
</UL>

<P><STRONG><a name="[a2]"></a>r_gpt_write_protect_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, r_gpt.o(.text.r_gpt_write_protect_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = r_gpt_write_protect_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_DutyCycleSet
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Close
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_CompareMatchSet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_PeriodSet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Disable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Enable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_hardware_initialize
</UL>

<P><STRONG><a name="[a3]"></a>gpt_hardware_events_disable</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, r_gpt.o(.text.gpt_hardware_events_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpt_hardware_events_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Disable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_hardware_initialize
</UL>

<P><STRONG><a name="[a4]"></a>gpt_calculate_duty_cycle</STRONG> (Thumb, 236 bytes, Stack size 36 bytes, r_gpt.o(.text.gpt_calculate_duty_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpt_calculate_duty_cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_DutyCycleSet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_hardware_initialize
</UL>

<P><STRONG><a name="[a5]"></a>gpt_clock_frequency_get</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, r_gpt.o(.text.gpt_clock_frequency_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gpt_clock_frequency_get &rArr; R_FSP_SystemClockHzGet
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_SystemClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_InfoGet
</UL>

<P><STRONG><a name="[a0]"></a>r_gpt_disable_irq</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, r_gpt.o(.text.r_gpt_disable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = r_gpt_disable_irq &rArr; R_FSP_IsrContextSet
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextSet
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_GPT_Close
</UL>

<P><STRONG><a name="[db]"></a>gpt_gtior_calculate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, r_gpt.o(.text.gpt_gtior_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpt_gtior_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_hardware_initialize
</UL>

<P><STRONG><a name="[dc]"></a>r_gpt_init_compare_match_channel</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, r_gpt.o(.text.r_gpt_init_compare_match_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = r_gpt_init_compare_match_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_hardware_initialize
</UL>

<P><STRONG><a name="[dd]"></a>r_gpt_enable_irq</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, r_gpt.o(.text.r_gpt_enable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = r_gpt_enable_irq &rArr; R_BSP_IrqCfgEnable &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_hardware_initialize
</UL>

<P><STRONG><a name="[da]"></a>R_FSP_SystemClockHzGet</STRONG> (Thumb, 218 bytes, Stack size 28 bytes, r_gpt.o(.text.R_FSP_SystemClockHzGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = R_FSP_SystemClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpt_clock_frequency_get
</UL>

<P><STRONG><a name="[10c]"></a>R_BSP_IrqDisable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, r_gpt.o(.text.R_BSP_IrqDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_disable_irq
</UL>

<P><STRONG><a name="[87]"></a>R_FSP_IsrContextSet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, r_gpt.o(.text.R_FSP_IsrContextSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_IsrContextSet
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_disable_irq
</UL>

<P><STRONG><a name="[91]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_gpt.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>

<P><STRONG><a name="[90]"></a>R_BSP_IrqClearPending</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, r_gpt.o(.text.R_BSP_IrqClearPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[8c]"></a>R_BSP_IrqCfgEnable</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_gpt.o(.text.R_BSP_IrqCfgEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = R_BSP_IrqCfgEnable &rArr; R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_gpt_enable_irq
</UL>

<P><STRONG><a name="[85]"></a>R_BSP_IrqCfg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_gpt.o(.text.R_BSP_IrqCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_BSP_IrqCfg &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
</UL>

<P><STRONG><a name="[8d]"></a>R_BSP_IrqEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, r_gpt.o(.text.R_BSP_IrqEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnableNoClear
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfgEnable
</UL>

<P><STRONG><a name="[86]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, r_gpt.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>

<P><STRONG><a name="[97]"></a>R_BSP_IrqEnableNoClear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, r_gpt.o(.text.R_BSP_IrqEnableNoClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqEnableNoClear
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[a8]"></a>r_ioport_pins_config</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, r_ioport.o(.text.r_ioport_pins_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = r_ioport_pins_config &rArr; bsp_vbatt_init &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_PinAccessDisable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pfs_write
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_PinAccessEnable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinsCfg
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_Open
</UL>

<P><STRONG><a name="[a9]"></a>bsp_vbatt_init</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, r_ioport.o(.text.bsp_vbatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_vbatt_init &rArr; R_BSP_SoftwareDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinCfg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>

<P><STRONG><a name="[aa]"></a>R_BSP_PinAccessEnable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, r_ioport.o(.text.R_BSP_PinAccessEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_BSP_PinAccessEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinCfg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>

<P><STRONG><a name="[ab]"></a>r_ioport_pfs_write</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, r_ioport.o(.text.r_ioport_pfs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = r_ioport_pfs_write
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinCfg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>

<P><STRONG><a name="[ac]"></a>R_BSP_PinAccessDisable</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, r_ioport.o(.text.R_BSP_PinAccessDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_BSP_PinAccessDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinCfg
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>

<P><STRONG><a name="[ad]"></a>r_ioport_hw_pin_event_output_data_write</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, r_ioport.o(.text.r_ioport_hw_pin_event_output_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = r_ioport_hw_pin_event_output_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinEventOutputWrite
</UL>

<P><STRONG><a name="[ae]"></a>R_BSP_PinRead</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_ioport.o(.text.R_BSP_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinRead
</UL>

<P><STRONG><a name="[113]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_sci_b_spi.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_eri_isr
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_tei_isr
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_rxi_isr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_txi_isr
</UL>

<P><STRONG><a name="[116]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_sci_b_spi.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_eri_isr
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_tei_isr
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_rxi_isr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_txi_isr
</UL>

<P><STRONG><a name="[114]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_sci_b_spi.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_eri_isr
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_tei_isr
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_rxi_isr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_txi_isr
</UL>

<P><STRONG><a name="[117]"></a>r_sci_b_spi_transmit</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, r_sci_b_spi.o(.text.r_sci_b_spi_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = r_sci_b_spi_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_rxi_isr
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_txi_isr
</UL>

<P><STRONG><a name="[115]"></a>r_sci_b_spi_call_callback</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, r_sci_b_spi.o(.text.r_sci_b_spi_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_sci_b_spi_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_eri_isr
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_spi_tei_isr
</UL>

<P><STRONG><a name="[b1]"></a>r_sci_b_irqs_cfg</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.r_sci_b_irqs_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = r_sci_b_irqs_cfg &rArr; r_sci_b_irq_cfg &rArr; R_BSP_IrqCfg &rArr; R_FSP_IsrContextSet
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_irq_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Open
</UL>

<P><STRONG><a name="[b2]"></a>r_sci_b_uart_config_set</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, r_sci_b_uart.o(.text.r_sci_b_uart_config_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_sci_b_uart_config_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Open
</UL>

<P><STRONG><a name="[98]"></a>R_BSP_IrqEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.R_BSP_IrqEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnableNoClear
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Open
</UL>

<P><STRONG><a name="[b0]"></a>R_BSP_IrqDisable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_BSP_IrqDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_Close
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_irq_cfg
</UL>

<P><STRONG><a name="[10d]"></a>r_sci_b_irq_cfg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.r_sci_b_irq_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = r_sci_b_irq_cfg &rArr; R_BSP_IrqCfg &rArr; R_FSP_IsrContextSet
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_irqs_cfg
</UL>

<P><STRONG><a name="[92]"></a>R_BSP_IrqClearPending</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, r_sci_b_uart.o(.text.R_BSP_IrqClearPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[99]"></a>R_BSP_IrqEnableNoClear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_BSP_IrqEnableNoClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqEnableNoClear
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[9d]"></a>R_FSP_SciClockHzGet</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, r_sci_b_uart.o(.text.R_FSP_SciClockHzGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_FSP_SciClockHzGet &rArr; R_FSP_ClockDividerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_ClockDividerGet
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SourceClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_B_UART_BaudCalculate
</UL>

<P><STRONG><a name="[9e]"></a>R_FSP_ClockDividerGet</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_FSP_ClockDividerGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_ClockDividerGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_SciClockHzGet
</UL>

<P><STRONG><a name="[118]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_eri_isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_tei_isr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_rxi_isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_txi_isr
</UL>

<P><STRONG><a name="[93]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_sci_b_uart.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_eri_isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_tei_isr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_rxi_isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_txi_isr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_irq_cfg
</UL>

<P><STRONG><a name="[119]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_sci_b_uart.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_eri_isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_tei_isr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_rxi_isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_txi_isr
</UL>

<P><STRONG><a name="[11a]"></a>r_sci_b_uart_call_callback</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, r_sci_b_uart.o(.text.r_sci_b_uart_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = r_sci_b_uart_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_eri_isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_tei_isr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_rxi_isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_b_uart_txi_isr
</UL>

<P><STRONG><a name="[88]"></a>R_BSP_IrqCfg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, r_sci_b_uart.o(.text.R_BSP_IrqCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_BSP_IrqCfg &rArr; R_FSP_IsrContextSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_FSP_IsrContextSet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_b_irq_cfg
</UL>

<P><STRONG><a name="[89]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>

<P><STRONG><a name="[8a]"></a>R_FSP_IsrContextSet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, r_sci_b_uart.o(.text.R_FSP_IsrContextSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_IsrContextSet
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqCfg
</UL>

<P><STRONG><a name="[10f]"></a>r_sdhi_transfer_end</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, r_sdhi.o(.text.r_sdhi_transfer_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = r_sdhi_transfer_end
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_transfer_callback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_access_irq_process
</UL>

<P><STRONG><a name="[111]"></a>r_sdhi_call_callback</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, r_sdhi.o(.text.r_sdhi_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_sdhi_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_card_isr
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_accs_isr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_transfer_callback
</UL>

<P><STRONG><a name="[11b]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_sdhi.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_dma_req_isr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_card_isr
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_accs_isr
</UL>

<P><STRONG><a name="[11c]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_sdhi.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_dma_req_isr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_card_isr
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_accs_isr
</UL>

<P><STRONG><a name="[10e]"></a>r_sdhi_access_irq_process</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, r_sdhi.o(.text.r_sdhi_access_irq_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = r_sdhi_access_irq_process &rArr; r_sdhi_transfer_end
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sdhi_transfer_end
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_accs_isr
</UL>

<P><STRONG><a name="[11d]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_sdhi.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_dma_req_isr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_card_isr
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhimmc_accs_isr
</UL>

<P><STRONG><a name="[120]"></a>R_BSP_IrqDisable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, r_spi_b.o(.text.R_BSP_IrqDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_eri_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_tei_isr
</UL>

<P><STRONG><a name="[11e]"></a>R_FSP_CurrentIrqGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_spi_b.o(.text.R_FSP_CurrentIrqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_FSP_CurrentIrqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_eri_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_tei_isr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_txi_isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_rxi_isr
</UL>

<P><STRONG><a name="[95]"></a>R_BSP_IrqStatusClear</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, r_spi_b.o(.text.R_BSP_IrqStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_eri_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_tei_isr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_txi_isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_rxi_isr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
</UL>

<P><STRONG><a name="[11f]"></a>R_FSP_IsrContextGet</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, r_spi_b.o(.text.R_FSP_IsrContextGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R_FSP_IsrContextGet
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_eri_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_tei_isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_rxi_isr
</UL>

<P><STRONG><a name="[122]"></a>r_spi_b_receive</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, r_spi_b.o(.text.r_spi_b_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = r_spi_b_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_rxi_isr
</UL>

<P><STRONG><a name="[123]"></a>r_spi_b_transmit</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, r_spi_b.o(.text.r_spi_b_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = r_spi_b_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_rxi_isr
</UL>

<P><STRONG><a name="[9b]"></a>R_BSP_IrqEnableNoClear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, r_spi_b.o(.text.R_BSP_IrqEnableNoClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_IrqEnableNoClear
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_rxi_isr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[9a]"></a>R_BSP_IrqEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, r_spi_b.o(.text.R_BSP_IrqEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = R_BSP_IrqEnable &rArr; R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqClearPending
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnableNoClear
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_eri_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_tei_isr
</UL>

<P><STRONG><a name="[121]"></a>r_spi_b_call_callback</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, r_spi_b.o(.text.r_spi_b_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_spi_b_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_eri_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_b_tei_isr
</UL>

<P><STRONG><a name="[94]"></a>R_BSP_IrqClearPending</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, r_spi_b.o(.text.R_BSP_IrqClearPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = R_BSP_IrqClearPending &rArr; R_BSP_IrqStatusClear
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_IrqEnable
</UL>

<P><STRONG><a name="[14e]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[142]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[151]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[150]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[23]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[65]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1f]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
